// @generated by protoc-gen-es v2.7.0 with parameter "target=ts"
// @generated from file scour/query/v1/query.proto (package scour.query.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv2";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Value } from "../../../std/v1/std_pb";
import { file_std_v1_std } from "../../../std/v1/std_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file scour/query/v1/query.proto.
 */
export const file_scour_query_v1_query: GenFile = /*@__PURE__*/
  fileDesc("ChpzY291ci9xdWVyeS92MS9xdWVyeS5wcm90bxIOc2NvdXIucXVlcnkudjEiOgoSQ3JlYXRlUXVlcnlSZXF1ZXN0EiQKBXF1ZXJ5GAEgASgLMhUuc2NvdXIucXVlcnkudjEuUXVlcnkicQoTQ3JlYXRlUXVlcnlSZXNwb25zZRIKCgJpZBgBIAEoCRImCgZzZXJpZXMYAiABKAsyFi5zY291ci5xdWVyeS52MS5TZXJpZXMSJgoGcmVzdWx0GAMgASgLMhYuc2NvdXIucXVlcnkudjEuUmVzdWx0IvMBCgVRdWVyeRIsCgl2aXN1YWxpc2UYASADKAsyGS5zY291ci5xdWVyeS52MS5WaXN1YWxpc2USJAoFd2hlcmUYAiABKAsyFS5zY291ci5xdWVyeS52MS5XaGVyZRIQCghncm91cF9ieRgDIAMoCRInCghvcmRlcl9ieRgEIAMoCzIVLnNjb3VyLnF1ZXJ5LnYxLk9yZGVyEg0KBWxpbWl0GAUgASgNEiYKBmhhdmluZxgGIAEoCzIWLnNjb3VyLnF1ZXJ5LnYxLkNsYXVzZRISCgpzdGFydF90aW1lGAcgASgDEhAKCGVuZF90aW1lGAggASgDIkMKCVZpc3VhbGlzZRInCgJvcBgBIAEoDjIbLnNjb3VyLnF1ZXJ5LnYxLlZpc3VhbGlzZU9wEg0KBWZpZWxkGAIgASgJIlUKBVdoZXJlEiMKAm9wGAEgASgOMhcuc2NvdXIucXVlcnkudjEuV2hlcmVPcBInCgdjbGF1c2VzGAIgAygLMhYuc2NvdXIucXVlcnkudjEuQ2xhdXNlIk0KBkNsYXVzZRINCgVmaWVsZBgBIAEoCRINCgV2YWx1ZRgCIAEoCRIlCgJvcBgDIAEoDjIZLnNjb3VyLnF1ZXJ5LnYxLkNvbXBhcmVPcCI+CgVPcmRlchINCgVmaWVsZBgBIAEoCRImCgVvcmRlchgCIAEoDjIXLnNjb3VyLnF1ZXJ5LnYxLk9yZGVyT3Ai2QEKBlNlcmllcxIuCgp0aW1lc3RhbXBzGAEgAygLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIuCgRkYXRhGAIgAygLMiAuc2NvdXIucXVlcnkudjEuU2VyaWVzLkRhdGFFbnRyeRIWCg52aXN1YWxpc2F0aW9ucxgDIAMoCRIOCgZncm91cHMYBCADKAkaRwoJRGF0YUVudHJ5EgsKA2tleRgBIAEoCRIpCgV2YWx1ZRgCIAEoCzIaLnNjb3VyLnF1ZXJ5LnYxLlNlcmllc0RhdGE6AjgBIjkKClNlcmllc0RhdGESDAoEbmFtZRgBIAEoCRIdCgZ2YWx1ZXMYAiADKAsyDS5zdGQudjEuVmFsdWUiOwoGUmVzdWx0Eg4KBmZpZWxkcxgBIAMoCRIhCgRyb3dzGAIgAygLMhMuc2NvdXIucXVlcnkudjEuUm93IiQKA1JvdxIdCgZ2YWx1ZXMYASADKAsyDS5zdGQudjEuVmFsdWUicgoPUGFycXVldE1ldGFkYXRhEjMKDWZpbGVfbWV0YWRhdGEYASABKAsyHC5zY291ci5xdWVyeS52MS5GaWxlTWV0YWRhdGESKgoKcm93X2dyb3VwcxgCIAMoCzIWLnNjb3VyLnF1ZXJ5LnYxLlRocmlmdCIXCgZUaHJpZnQSDQoFYnl0ZXMYASABKAwi9gEKDEZpbGVNZXRhZGF0YRIPCgd2ZXJzaW9uGAEgASgFEhAKCG51bV9yb3dzGAIgASgDEhcKCmNyZWF0ZWRfYnkYAyABKAlIAIgBARI0ChJrZXlfdmFsdWVfbWV0YWRhdGEYBCADKAsyGC5zY291ci5xdWVyeS52MS5LZXlWYWx1ZRIxChFzY2hlbWFfZGVzY3JpcHRvchgFIAMoCzIWLnNjb3VyLnF1ZXJ5LnYxLlRocmlmdBIyCg1jb2x1bW5fb3JkZXJzGAYgAygLMhsuc2NvdXIucXVlcnkudjEuQ29sdW1uT3JkZXJCDQoLX2NyZWF0ZWRfYnkiNQoIS2V5VmFsdWUSCwoDa2V5GAEgASgJEhIKBXZhbHVlGAIgASgJSACIAQFCCAoGX3ZhbHVlImUKC0NvbHVtbk9yZGVyEicKBHR5cGUYASABKA4yGS5zY291ci5xdWVyeS52MS5PcmRlclR5cGUSLQoKc29ydF9vcmRlchgCIAEoDjIZLnNjb3VyLnF1ZXJ5LnYxLlNvcnRPcmRlciqBBAoLVmlzdWFsaXNlT3ASHAoYVklTVUFMSVNFX09QX1VOU1BFQ0lGSUVEEAASFgoSVklTVUFMSVNFX09QX0NPVU5UEAESHwobVklTVUFMSVNFX09QX0NPVU5UX0RJU1RJTkNUEAISFAoQVklTVUFMSVNFX09QX1NVTRADEhQKEFZJU1VBTElTRV9PUF9BVkcQBBIUChBWSVNVQUxJU0VfT1BfTUFYEAUSFAoQVklTVUFMSVNFX09QX01JThAGEhUKEVZJU1VBTElTRV9PUF9QMDAxEAcSFAoQVklTVUFMSVNFX09QX1AwMRAIEhQKEFZJU1VBTElTRV9PUF9QMDUQCRIUChBWSVNVQUxJU0VfT1BfUDEwEAoSFAoQVklTVUFMSVNFX09QX1AyNRALEhQKEFZJU1VBTElTRV9PUF9QNTAQDBIUChBWSVNVQUxJU0VfT1BfUDc1EA0SFAoQVklTVUFMSVNFX09QX1A5MBAOEhQKEFZJU1VBTElTRV9PUF9QOTUQDxIUChBWSVNVQUxJU0VfT1BfUDk5EBASFQoRVklTVUFMSVNFX09QX1A5OTkQERIZChVWSVNVQUxJU0VfT1BfUkFURV9BVkcQEhIZChVWSVNVQUxJU0VfT1BfUkFURV9TVU0QExIZChVWSVNVQUxJU0VfT1BfUkFURV9NQVgQFCpGCgdXaGVyZU9wEhgKFFdIRVJFX09QX1VOU1BFQ0lGSUVEEAASEAoMV0hFUkVfT1BfQU5EEAESDwoLV0hFUkVfT1BfT1IQAiq7AgoJQ29tcGFyZU9wEhoKFkNPTVBBUkVfT1BfVU5TUEVDSUZJRUQQABIUChBDT01QQVJFX09QX0VRVUFMEAESGAoUQ09NUEFSRV9PUF9OT1RfRVFVQUwQAhIbChdDT01QQVJFX09QX0dSRUFURVJfVEhBThADEiQKIENPTVBBUkVfT1BfR1JFQVRFUl9USEFOX09SX0VRVUFMEAQSGAoUQ09NUEFSRV9PUF9MRVNTX1RIQU4QBRIhCh1DT01QQVJFX09QX0xFU1NfVEhBTl9PUl9FUVVBTBAGEhcKE0NPTVBBUkVfT1BfQ09OVEFJTlMQBxIfChtDT01QQVJFX09QX0RPRVNfTk9UX0NPTlRBSU4QCBIRCg1DT01QQVJFX09QX0lOEAkSFQoRQ09NUEFSRV9PUF9OT1RfSU4QCipICgdPcmRlck9wEhgKFE9SREVSX09QX1VOU1BFQ0lGSUVEEAASEAoMT1JERVJfT1BfQVNDEAESEQoNT1JERVJfT1BfREVTQxACKmQKCU9yZGVyVHlwZRIaChZPUkRFUl9UWVBFX1VOU1BFQ0lGSUVEEAASGAoUT1JERVJfVFlQRV9VTkRFRklORUQQARIhCh1PUkRFUl9UWVBFX1RZUEVfREVGSU5FRF9PUkRFUhACKnEKCVNvcnRPcmRlchIaChZTT1JUX09SREVSX1VOU1BFQ0lGSUVEEAASGAoUU09SVF9PUkRFUl9VTkRFRklORUQQARIVChFTT1JUX09SREVSX1NJR05FRBACEhcKE1NPUlRfT1JERVJfVU5TSUdORUQQA0I4WjZnaXRodWIuY29tL2xpcXVpZHNwaWxsL3Byb3RvL2dvL3Njb3VyL3F1ZXJ5L3YxO3F1ZXJ5djFiBnByb3RvMw", [file_google_protobuf_timestamp, file_std_v1_std]);

/**
 * @generated from message scour.query.v1.CreateQueryRequest
 */
export type CreateQueryRequest = Message<"scour.query.v1.CreateQueryRequest"> & {
  /**
   * @generated from field: scour.query.v1.Query query = 1;
   */
  query?: Query;
};

/**
 * Describes the message scour.query.v1.CreateQueryRequest.
 * Use `create(CreateQueryRequestSchema)` to create a new message.
 */
export const CreateQueryRequestSchema: GenMessage<CreateQueryRequest> = /*@__PURE__*/
  messageDesc(file_scour_query_v1_query, 0);

/**
 * @generated from message scour.query.v1.CreateQueryResponse
 */
export type CreateQueryResponse = Message<"scour.query.v1.CreateQueryResponse"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The time series data. If many fields are queried at once e.g select bytes, src_ip
   * each field will have its own series
   *
   * @generated from field: scour.query.v1.Series series = 2;
   */
  series?: Series;

  /**
   * This the "raw" data i.e the rows returned by the query. Used to show the raw data
   * in the UI
   *
   * @generated from field: scour.query.v1.Result result = 3;
   */
  result?: Result;
};

/**
 * Describes the message scour.query.v1.CreateQueryResponse.
 * Use `create(CreateQueryResponseSchema)` to create a new message.
 */
export const CreateQueryResponseSchema: GenMessage<CreateQueryResponse> = /*@__PURE__*/
  messageDesc(file_scour_query_v1_query, 1);

/**
 * @generated from message scour.query.v1.Query
 */
export type Query = Message<"scour.query.v1.Query"> & {
  /**
   * @generated from field: repeated scour.query.v1.Visualise visualise = 1;
   */
  visualise: Visualise[];

  /**
   * @generated from field: scour.query.v1.Where where = 2;
   */
  where?: Where;

  /**
   * @generated from field: repeated string group_by = 3;
   */
  groupBy: string[];

  /**
   * @generated from field: repeated scour.query.v1.Order order_by = 4;
   */
  orderBy: Order[];

  /**
   * @generated from field: uint32 limit = 5;
   */
  limit: number;

  /**
   * @generated from field: scour.query.v1.Clause having = 6;
   */
  having?: Clause;

  /**
   * @generated from field: int64 start_time = 7;
   */
  startTime: bigint;

  /**
   * @generated from field: int64 end_time = 8;
   */
  endTime: bigint;
};

/**
 * Describes the message scour.query.v1.Query.
 * Use `create(QuerySchema)` to create a new message.
 */
export const QuerySchema: GenMessage<Query> = /*@__PURE__*/
  messageDesc(file_scour_query_v1_query, 2);

/**
 * @generated from message scour.query.v1.Visualise
 */
export type Visualise = Message<"scour.query.v1.Visualise"> & {
  /**
   * @generated from field: scour.query.v1.VisualiseOp op = 1;
   */
  op: VisualiseOp;

  /**
   * @generated from field: string field = 2;
   */
  field: string;
};

/**
 * Describes the message scour.query.v1.Visualise.
 * Use `create(VisualiseSchema)` to create a new message.
 */
export const VisualiseSchema: GenMessage<Visualise> = /*@__PURE__*/
  messageDesc(file_scour_query_v1_query, 3);

/**
 * @generated from message scour.query.v1.Where
 */
export type Where = Message<"scour.query.v1.Where"> & {
  /**
   * @generated from field: scour.query.v1.WhereOp op = 1;
   */
  op: WhereOp;

  /**
   * @generated from field: repeated scour.query.v1.Clause clauses = 2;
   */
  clauses: Clause[];
};

/**
 * Describes the message scour.query.v1.Where.
 * Use `create(WhereSchema)` to create a new message.
 */
export const WhereSchema: GenMessage<Where> = /*@__PURE__*/
  messageDesc(file_scour_query_v1_query, 4);

/**
 * @generated from message scour.query.v1.Clause
 */
export type Clause = Message<"scour.query.v1.Clause"> & {
  /**
   * @generated from field: string field = 1;
   */
  field: string;

  /**
   * @generated from field: string value = 2;
   */
  value: string;

  /**
   * @generated from field: scour.query.v1.CompareOp op = 3;
   */
  op: CompareOp;
};

/**
 * Describes the message scour.query.v1.Clause.
 * Use `create(ClauseSchema)` to create a new message.
 */
export const ClauseSchema: GenMessage<Clause> = /*@__PURE__*/
  messageDesc(file_scour_query_v1_query, 5);

/**
 * @generated from message scour.query.v1.Order
 */
export type Order = Message<"scour.query.v1.Order"> & {
  /**
   * @generated from field: string field = 1;
   */
  field: string;

  /**
   * @generated from field: scour.query.v1.OrderOp order = 2;
   */
  order: OrderOp;
};

/**
 * Describes the message scour.query.v1.Order.
 * Use `create(OrderSchema)` to create a new message.
 */
export const OrderSchema: GenMessage<Order> = /*@__PURE__*/
  messageDesc(file_scour_query_v1_query, 6);

/**
 * @generated from message scour.query.v1.Series
 */
export type Series = Message<"scour.query.v1.Series"> & {
  /**
   * @generated from field: repeated google.protobuf.Timestamp timestamps = 1;
   */
  timestamps: Timestamp[];

  /**
   * The series of data returned by our query
   *
   * @generated from field: map<string, scour.query.v1.SeriesData> data = 2;
   */
  data: { [key: string]: SeriesData };

  /**
   * The name of the columns that are visualisations of the data (i.e the
   * operation on the data)
   *
   * @generated from field: repeated string visualisations = 3;
   */
  visualisations: string[];

  /**
   * The names of the columns that are used to group the data
   *
   * @generated from field: repeated string groups = 4;
   */
  groups: string[];
};

/**
 * Describes the message scour.query.v1.Series.
 * Use `create(SeriesSchema)` to create a new message.
 */
export const SeriesSchema: GenMessage<Series> = /*@__PURE__*/
  messageDesc(file_scour_query_v1_query, 7);

/**
 * @generated from message scour.query.v1.SeriesData
 */
export type SeriesData = Message<"scour.query.v1.SeriesData"> & {
  /**
   * The name of the series. This is the field that was queried
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: repeated std.v1.Value values = 2;
   */
  values: Value[];
};

/**
 * Describes the message scour.query.v1.SeriesData.
 * Use `create(SeriesDataSchema)` to create a new message.
 */
export const SeriesDataSchema: GenMessage<SeriesData> = /*@__PURE__*/
  messageDesc(file_scour_query_v1_query, 8);

/**
 * @generated from message scour.query.v1.Result
 */
export type Result = Message<"scour.query.v1.Result"> & {
  /**
   * @generated from field: repeated string fields = 1;
   */
  fields: string[];

  /**
   * @generated from field: repeated scour.query.v1.Row rows = 2;
   */
  rows: Row[];
};

/**
 * Describes the message scour.query.v1.Result.
 * Use `create(ResultSchema)` to create a new message.
 */
export const ResultSchema: GenMessage<Result> = /*@__PURE__*/
  messageDesc(file_scour_query_v1_query, 9);

/**
 * @generated from message scour.query.v1.Row
 */
export type Row = Message<"scour.query.v1.Row"> & {
  /**
   * @generated from field: repeated std.v1.Value values = 1;
   */
  values: Value[];
};

/**
 * Describes the message scour.query.v1.Row.
 * Use `create(RowSchema)` to create a new message.
 */
export const RowSchema: GenMessage<Row> = /*@__PURE__*/
  messageDesc(file_scour_query_v1_query, 10);

/**
 * @generated from message scour.query.v1.ParquetMetadata
 */
export type ParquetMetadata = Message<"scour.query.v1.ParquetMetadata"> & {
  /**
   * @generated from field: scour.query.v1.FileMetadata file_metadata = 1;
   */
  fileMetadata?: FileMetadata;

  /**
   * @generated from field: repeated scour.query.v1.Thrift row_groups = 2;
   */
  rowGroups: Thrift[];
};

/**
 * Describes the message scour.query.v1.ParquetMetadata.
 * Use `create(ParquetMetadataSchema)` to create a new message.
 */
export const ParquetMetadataSchema: GenMessage<ParquetMetadata> = /*@__PURE__*/
  messageDesc(file_scour_query_v1_query, 11);

/**
 * @generated from message scour.query.v1.Thrift
 */
export type Thrift = Message<"scour.query.v1.Thrift"> & {
  /**
   * @generated from field: bytes bytes = 1;
   */
  bytes: Uint8Array;
};

/**
 * Describes the message scour.query.v1.Thrift.
 * Use `create(ThriftSchema)` to create a new message.
 */
export const ThriftSchema: GenMessage<Thrift> = /*@__PURE__*/
  messageDesc(file_scour_query_v1_query, 12);

/**
 * @generated from message scour.query.v1.FileMetadata
 */
export type FileMetadata = Message<"scour.query.v1.FileMetadata"> & {
  /**
   * @generated from field: int32 version = 1;
   */
  version: number;

  /**
   * @generated from field: int64 num_rows = 2;
   */
  numRows: bigint;

  /**
   * @generated from field: optional string created_by = 3;
   */
  createdBy?: string;

  /**
   * @generated from field: repeated scour.query.v1.KeyValue key_value_metadata = 4;
   */
  keyValueMetadata: KeyValue[];

  /**
   * @generated from field: repeated scour.query.v1.Thrift schema_descriptor = 5;
   */
  schemaDescriptor: Thrift[];

  /**
   * @generated from field: repeated scour.query.v1.ColumnOrder column_orders = 6;
   */
  columnOrders: ColumnOrder[];
};

/**
 * Describes the message scour.query.v1.FileMetadata.
 * Use `create(FileMetadataSchema)` to create a new message.
 */
export const FileMetadataSchema: GenMessage<FileMetadata> = /*@__PURE__*/
  messageDesc(file_scour_query_v1_query, 13);

/**
 * @generated from message scour.query.v1.KeyValue
 */
export type KeyValue = Message<"scour.query.v1.KeyValue"> & {
  /**
   * @generated from field: string key = 1;
   */
  key: string;

  /**
   * @generated from field: optional string value = 2;
   */
  value?: string;
};

/**
 * Describes the message scour.query.v1.KeyValue.
 * Use `create(KeyValueSchema)` to create a new message.
 */
export const KeyValueSchema: GenMessage<KeyValue> = /*@__PURE__*/
  messageDesc(file_scour_query_v1_query, 14);

/**
 * @generated from message scour.query.v1.ColumnOrder
 */
export type ColumnOrder = Message<"scour.query.v1.ColumnOrder"> & {
  /**
   * @generated from field: scour.query.v1.OrderType type = 1;
   */
  type: OrderType;

  /**
   * @generated from field: scour.query.v1.SortOrder sort_order = 2;
   */
  sortOrder: SortOrder;
};

/**
 * Describes the message scour.query.v1.ColumnOrder.
 * Use `create(ColumnOrderSchema)` to create a new message.
 */
export const ColumnOrderSchema: GenMessage<ColumnOrder> = /*@__PURE__*/
  messageDesc(file_scour_query_v1_query, 15);

/**
 * @generated from enum scour.query.v1.VisualiseOp
 */
export enum VisualiseOp {
  /**
   * @generated from enum value: VISUALISE_OP_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: VISUALISE_OP_COUNT = 1;
   */
  COUNT = 1,

  /**
   * @generated from enum value: VISUALISE_OP_COUNT_DISTINCT = 2;
   */
  COUNT_DISTINCT = 2,

  /**
   * @generated from enum value: VISUALISE_OP_SUM = 3;
   */
  SUM = 3,

  /**
   * @generated from enum value: VISUALISE_OP_AVG = 4;
   */
  AVG = 4,

  /**
   * @generated from enum value: VISUALISE_OP_MAX = 5;
   */
  MAX = 5,

  /**
   * @generated from enum value: VISUALISE_OP_MIN = 6;
   */
  MIN = 6,

  /**
   * Unsupported
   *
   * @generated from enum value: VISUALISE_OP_P001 = 7;
   */
  P001 = 7,

  /**
   * @generated from enum value: VISUALISE_OP_P01 = 8;
   */
  P01 = 8,

  /**
   * @generated from enum value: VISUALISE_OP_P05 = 9;
   */
  P05 = 9,

  /**
   * @generated from enum value: VISUALISE_OP_P10 = 10;
   */
  P10 = 10,

  /**
   * @generated from enum value: VISUALISE_OP_P25 = 11;
   */
  P25 = 11,

  /**
   * @generated from enum value: VISUALISE_OP_P50 = 12;
   */
  P50 = 12,

  /**
   * @generated from enum value: VISUALISE_OP_P75 = 13;
   */
  P75 = 13,

  /**
   * @generated from enum value: VISUALISE_OP_P90 = 14;
   */
  P90 = 14,

  /**
   * @generated from enum value: VISUALISE_OP_P95 = 15;
   */
  P95 = 15,

  /**
   * @generated from enum value: VISUALISE_OP_P99 = 16;
   */
  P99 = 16,

  /**
   * @generated from enum value: VISUALISE_OP_P999 = 17;
   */
  P999 = 17,

  /**
   * @generated from enum value: VISUALISE_OP_RATE_AVG = 18;
   */
  RATE_AVG = 18,

  /**
   * @generated from enum value: VISUALISE_OP_RATE_SUM = 19;
   */
  RATE_SUM = 19,

  /**
   * @generated from enum value: VISUALISE_OP_RATE_MAX = 20;
   */
  RATE_MAX = 20,
}

/**
 * Describes the enum scour.query.v1.VisualiseOp.
 */
export const VisualiseOpSchema: GenEnum<VisualiseOp> = /*@__PURE__*/
  enumDesc(file_scour_query_v1_query, 0);

/**
 * @generated from enum scour.query.v1.WhereOp
 */
export enum WhereOp {
  /**
   * @generated from enum value: WHERE_OP_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: WHERE_OP_AND = 1;
   */
  AND = 1,

  /**
   * @generated from enum value: WHERE_OP_OR = 2;
   */
  OR = 2,
}

/**
 * Describes the enum scour.query.v1.WhereOp.
 */
export const WhereOpSchema: GenEnum<WhereOp> = /*@__PURE__*/
  enumDesc(file_scour_query_v1_query, 1);

/**
 * @generated from enum scour.query.v1.CompareOp
 */
export enum CompareOp {
  /**
   * @generated from enum value: COMPARE_OP_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: COMPARE_OP_EQUAL = 1;
   */
  EQUAL = 1,

  /**
   * @generated from enum value: COMPARE_OP_NOT_EQUAL = 2;
   */
  NOT_EQUAL = 2,

  /**
   * @generated from enum value: COMPARE_OP_GREATER_THAN = 3;
   */
  GREATER_THAN = 3,

  /**
   * @generated from enum value: COMPARE_OP_GREATER_THAN_OR_EQUAL = 4;
   */
  GREATER_THAN_OR_EQUAL = 4,

  /**
   * @generated from enum value: COMPARE_OP_LESS_THAN = 5;
   */
  LESS_THAN = 5,

  /**
   * @generated from enum value: COMPARE_OP_LESS_THAN_OR_EQUAL = 6;
   */
  LESS_THAN_OR_EQUAL = 6,

  /**
   * @generated from enum value: COMPARE_OP_CONTAINS = 7;
   */
  CONTAINS = 7,

  /**
   * @generated from enum value: COMPARE_OP_DOES_NOT_CONTAIN = 8;
   */
  DOES_NOT_CONTAIN = 8,

  /**
   * @generated from enum value: COMPARE_OP_IN = 9;
   */
  IN = 9,

  /**
   * @generated from enum value: COMPARE_OP_NOT_IN = 10;
   */
  NOT_IN = 10,
}

/**
 * Describes the enum scour.query.v1.CompareOp.
 */
export const CompareOpSchema: GenEnum<CompareOp> = /*@__PURE__*/
  enumDesc(file_scour_query_v1_query, 2);

/**
 * @generated from enum scour.query.v1.OrderOp
 */
export enum OrderOp {
  /**
   * @generated from enum value: ORDER_OP_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ORDER_OP_ASC = 1;
   */
  ASC = 1,

  /**
   * @generated from enum value: ORDER_OP_DESC = 2;
   */
  DESC = 2,
}

/**
 * Describes the enum scour.query.v1.OrderOp.
 */
export const OrderOpSchema: GenEnum<OrderOp> = /*@__PURE__*/
  enumDesc(file_scour_query_v1_query, 3);

/**
 * @generated from enum scour.query.v1.OrderType
 */
export enum OrderType {
  /**
   * @generated from enum value: ORDER_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ORDER_TYPE_UNDEFINED = 1;
   */
  UNDEFINED = 1,

  /**
   * @generated from enum value: ORDER_TYPE_TYPE_DEFINED_ORDER = 2;
   */
  TYPE_DEFINED_ORDER = 2,
}

/**
 * Describes the enum scour.query.v1.OrderType.
 */
export const OrderTypeSchema: GenEnum<OrderType> = /*@__PURE__*/
  enumDesc(file_scour_query_v1_query, 4);

/**
 * @generated from enum scour.query.v1.SortOrder
 */
export enum SortOrder {
  /**
   * @generated from enum value: SORT_ORDER_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: SORT_ORDER_UNDEFINED = 1;
   */
  UNDEFINED = 1,

  /**
   * @generated from enum value: SORT_ORDER_SIGNED = 2;
   */
  SIGNED = 2,

  /**
   * @generated from enum value: SORT_ORDER_UNSIGNED = 3;
   */
  UNSIGNED = 3,
}

/**
 * Describes the enum scour.query.v1.SortOrder.
 */
export const SortOrderSchema: GenEnum<SortOrder> = /*@__PURE__*/
  enumDesc(file_scour_query_v1_query, 5);

