// @generated by protoc-gen-es v2.9.0 with parameter "target=ts"
// @generated from file fluid/controlplane/v1/controlplane.proto (package fluid.controlplane.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { KeyValue } from "../../../std/v1/std_pb";
import { file_std_v1_std } from "../../../std/v1/std_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file fluid/controlplane/v1/controlplane.proto.
 */
export const file_fluid_controlplane_v1_controlplane: GenFile = /*@__PURE__*/
  fileDesc("CihmbHVpZC9jb250cm9scGxhbmUvdjEvY29udHJvbHBsYW5lLnByb3RvEhVmbHVpZC5jb250cm9scGxhbmUudjEiTwoVQ29udHJvbE1lc3NhZ2VSZXF1ZXN0EjYKB21lc3NhZ2UYASABKAsyJS5mbHVpZC5jb250cm9scGxhbmUudjEuQ29udHJvbE1lc3NhZ2UiUAoWQ29udHJvbE1lc3NhZ2VSZXNwb25zZRI2CgdtZXNzYWdlGAEgASgLMiUuZmx1aWQuY29udHJvbHBsYW5lLnYxLkNvbnRyb2xNZXNzYWdlIoUBCg5Db250cm9sTWVzc2FnZRI1Cgl0ZWxlbWV0cnkYASABKAsyIC5mbHVpZC5jb250cm9scGxhbmUudjEuVGVsZW1ldHJ5SAASMQoHZGV2aWNlcxgCIAEoCzIeLmZsdWlkLmNvbnRyb2xwbGFuZS52MS5EZXZpY2VzSABCCQoHbWVzc2FnZSIbCglUZWxlbWV0cnkSDgoGZXhwb3J0GAEgASgIIkwKB0RldmljZXMSNwoHZ2VuZXJpYxgBIAEoCzIkLmZsdWlkLmNvbnRyb2xwbGFuZS52MS5HZW5lcmljRGV2aWNlSABCCAoGZGV2aWNlIlAKDUdlbmVyaWNEZXZpY2USPwoHZGV2aWNlcxgBIAMoCzIuLmZsdWlkLmNvbnRyb2xwbGFuZS52MS5HZW5lcmljRGV2aWNlRGVzY3JpcHRvciKyAQoXR2VuZXJpY0RldmljZURlc2NyaXB0b3ISDAoEbmFtZRgBIAEoCRITCgtkZXNjcmlwdGlvbhgCIAEoCRIOCgZ2ZW5kb3IYAyABKAkSDQoFbW9kZWwYBCABKAkSMwoJYWRkcmVzc2VzGAUgAygLMiAuZmx1aWQuY29udHJvbHBsYW5lLnYxLklwQWRkcmVzcxIgCgZsYWJlbHMYBiADKAsyEC5zdGQudjEuS2V5VmFsdWUiTwoJSXBBZGRyZXNzEg8KB2FkZHJlc3MYASABKAwSMQoHdmVyc2lvbhgCIAEoDjIgLmZsdWlkLmNvbnRyb2xwbGFuZS52MS5JUFZlcnNpb24qTgoJSVBWZXJzaW9uEhkKFUlQVkVSU0lPTl9VTlNQRUNJRklFRBAAEhIKDklQVkVSU0lPTl9JUFY0EAESEgoOSVBWRVJTSU9OX0lQVjYQAjJ/ChNDb250cm9sUGxhbmVTZXJ2aWNlEmgKB0NvbnRyb2wSLC5mbHVpZC5jb250cm9scGxhbmUudjEuQ29udHJvbE1lc3NhZ2VSZXF1ZXN0Gi0uZmx1aWQuY29udHJvbHBsYW5lLnYxLkNvbnRyb2xNZXNzYWdlUmVzcG9uc2UiAEJGWkRnaXRodWIuY29tL2xpcXVpZHNwaWxsL3Byb3RvL2dvL2ZsdWlkL2NvbnRyb2xwbGFuZS92MTtjb250cm9scGxhbmV2MWIGcHJvdG8z", [file_google_protobuf_timestamp, file_std_v1_std]);

/**
 * @generated from message fluid.controlplane.v1.ControlMessageRequest
 */
export type ControlMessageRequest = Message<"fluid.controlplane.v1.ControlMessageRequest"> & {
  /**
   * @generated from field: fluid.controlplane.v1.ControlMessage message = 1;
   */
  message?: ControlMessage;
};

/**
 * Describes the message fluid.controlplane.v1.ControlMessageRequest.
 * Use `create(ControlMessageRequestSchema)` to create a new message.
 */
export const ControlMessageRequestSchema: GenMessage<ControlMessageRequest> = /*@__PURE__*/
  messageDesc(file_fluid_controlplane_v1_controlplane, 0);

/**
 * @generated from message fluid.controlplane.v1.ControlMessageResponse
 */
export type ControlMessageResponse = Message<"fluid.controlplane.v1.ControlMessageResponse"> & {
  /**
   * @generated from field: fluid.controlplane.v1.ControlMessage message = 1;
   */
  message?: ControlMessage;
};

/**
 * Describes the message fluid.controlplane.v1.ControlMessageResponse.
 * Use `create(ControlMessageResponseSchema)` to create a new message.
 */
export const ControlMessageResponseSchema: GenMessage<ControlMessageResponse> = /*@__PURE__*/
  messageDesc(file_fluid_controlplane_v1_controlplane, 1);

/**
 * Control messages sent by the server. For each of them, since
 * we don't expect them to be changed often, we just send the
 * entire configuration on each change (for the given message)
 *
 * @generated from message fluid.controlplane.v1.ControlMessage
 */
export type ControlMessage = Message<"fluid.controlplane.v1.ControlMessage"> & {
  /**
   * @generated from oneof fluid.controlplane.v1.ControlMessage.message
   */
  message: {
    /**
     * @generated from field: fluid.controlplane.v1.Telemetry telemetry = 1;
     */
    value: Telemetry;
    case: "telemetry";
  } | {
    /**
     * @generated from field: fluid.controlplane.v1.Devices devices = 2;
     */
    value: Devices;
    case: "devices";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message fluid.controlplane.v1.ControlMessage.
 * Use `create(ControlMessageSchema)` to create a new message.
 */
export const ControlMessageSchema: GenMessage<ControlMessage> = /*@__PURE__*/
  messageDesc(file_fluid_controlplane_v1_controlplane, 2);

/**
 * Telemtry control messages
 *
 * @generated from message fluid.controlplane.v1.Telemetry
 */
export type Telemetry = Message<"fluid.controlplane.v1.Telemetry"> & {
  /**
   * Whether or not to export telemetry data. This can be
   * switched off to prevent data from being written to
   * the catalogue and to blob storage.
   *
   * @generated from field: bool export = 1;
   */
  export: boolean;
};

/**
 * Describes the message fluid.controlplane.v1.Telemetry.
 * Use `create(TelemetrySchema)` to create a new message.
 */
export const TelemetrySchema: GenMessage<Telemetry> = /*@__PURE__*/
  messageDesc(file_fluid_controlplane_v1_controlplane, 3);

/**
 * Device control messages
 *
 * @generated from message fluid.controlplane.v1.Devices
 */
export type Devices = Message<"fluid.controlplane.v1.Devices"> & {
  /**
   * @generated from oneof fluid.controlplane.v1.Devices.device
   */
  device: {
    /**
     * Generic device that sends flow data. All devices are generic
     * devices, however in future we will support more specific dimensions
     * from supported models
     *
     * @generated from field: fluid.controlplane.v1.GenericDevice generic = 1;
     */
    value: GenericDevice;
    case: "generic";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message fluid.controlplane.v1.Devices.
 * Use `create(DevicesSchema)` to create a new message.
 */
export const DevicesSchema: GenMessage<Devices> = /*@__PURE__*/
  messageDesc(file_fluid_controlplane_v1_controlplane, 4);

/**
 * @generated from message fluid.controlplane.v1.GenericDevice
 */
export type GenericDevice = Message<"fluid.controlplane.v1.GenericDevice"> & {
  /**
   * @generated from field: repeated fluid.controlplane.v1.GenericDeviceDescriptor devices = 1;
   */
  devices: GenericDeviceDescriptor[];
};

/**
 * Describes the message fluid.controlplane.v1.GenericDevice.
 * Use `create(GenericDeviceSchema)` to create a new message.
 */
export const GenericDeviceSchema: GenMessage<GenericDevice> = /*@__PURE__*/
  messageDesc(file_fluid_controlplane_v1_controlplane, 5);

/**
 * @generated from message fluid.controlplane.v1.GenericDeviceDescriptor
 */
export type GenericDeviceDescriptor = Message<"fluid.controlplane.v1.GenericDeviceDescriptor"> & {
  /**
   * User-defined name for the device
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Description of the device
   *
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * @generated from field: string vendor = 3;
   */
  vendor: string;

  /**
   * @generated from field: string model = 4;
   */
  model: string;

  /**
   * The IP addresses of the device. We use these to look
   * up the relevant device to enrich our flow with its information.
   *
   * @generated from field: repeated fluid.controlplane.v1.IpAddress addresses = 5;
   */
  addresses: IpAddress[];

  /**
   * User-defined labels for the device. Used to add more metadata
   * to query over.
   *
   * @generated from field: repeated std.v1.KeyValue labels = 6;
   */
  labels: KeyValue[];
};

/**
 * Describes the message fluid.controlplane.v1.GenericDeviceDescriptor.
 * Use `create(GenericDeviceDescriptorSchema)` to create a new message.
 */
export const GenericDeviceDescriptorSchema: GenMessage<GenericDeviceDescriptor> = /*@__PURE__*/
  messageDesc(file_fluid_controlplane_v1_controlplane, 6);

/**
 * @generated from message fluid.controlplane.v1.IpAddress
 */
export type IpAddress = Message<"fluid.controlplane.v1.IpAddress"> & {
  /**
   * @generated from field: bytes address = 1;
   */
  address: Uint8Array;

  /**
   * @generated from field: fluid.controlplane.v1.IPVersion version = 2;
   */
  version: IPVersion;
};

/**
 * Describes the message fluid.controlplane.v1.IpAddress.
 * Use `create(IpAddressSchema)` to create a new message.
 */
export const IpAddressSchema: GenMessage<IpAddress> = /*@__PURE__*/
  messageDesc(file_fluid_controlplane_v1_controlplane, 7);

/**
 * @generated from enum fluid.controlplane.v1.IPVersion
 */
export enum IPVersion {
  /**
   * @generated from enum value: IPVERSION_UNSPECIFIED = 0;
   */
  IPVERSION_UNSPECIFIED = 0,

  /**
   * @generated from enum value: IPVERSION_IPV4 = 1;
   */
  IPVERSION_IPV4 = 1,

  /**
   * @generated from enum value: IPVERSION_IPV6 = 2;
   */
  IPVERSION_IPV6 = 2,
}

/**
 * Describes the enum fluid.controlplane.v1.IPVersion.
 */
export const IPVersionSchema: GenEnum<IPVersion> = /*@__PURE__*/
  enumDesc(file_fluid_controlplane_v1_controlplane, 0);

/**
 * @generated from service fluid.controlplane.v1.ControlPlaneService
 */
export const ControlPlaneService: GenService<{
  /**
   * @generated from rpc fluid.controlplane.v1.ControlPlaneService.Control
   */
  control: {
    methodKind: "unary";
    input: typeof ControlMessageRequestSchema;
    output: typeof ControlMessageResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_fluid_controlplane_v1_controlplane, 0);

