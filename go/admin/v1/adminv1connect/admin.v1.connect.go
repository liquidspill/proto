// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: admin.v1.proto

package adminv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/liquidspill/proto/go/admin/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AdminServiceName is the fully-qualified name of the AdminService service.
	AdminServiceName = "admin.v1.AdminService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AdminServiceDatabaseGetProcedure is the fully-qualified name of the AdminService's DatabaseGet
	// RPC.
	AdminServiceDatabaseGetProcedure = "/admin.v1.AdminService/DatabaseGet"
	// AdminServiceDatabaseScanProcedure is the fully-qualified name of the AdminService's DatabaseScan
	// RPC.
	AdminServiceDatabaseScanProcedure = "/admin.v1.AdminService/DatabaseScan"
)

// AdminServiceClient is a client for the admin.v1.AdminService service.
type AdminServiceClient interface {
	// ===== Database operations (staff protected) =====
	DatabaseGet(context.Context, *connect.Request[v1.DatabaseGetRequest]) (*connect.Response[v1.DatabaseGetResponse], error)
	DatabaseScan(context.Context, *connect.Request[v1.DatabaseScanRequest]) (*connect.Response[v1.DatabaseScanResponse], error)
}

// NewAdminServiceClient constructs a client for the admin.v1.AdminService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAdminServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AdminServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	adminServiceMethods := v1.File_admin_v1_proto.Services().ByName("AdminService").Methods()
	return &adminServiceClient{
		databaseGet: connect.NewClient[v1.DatabaseGetRequest, v1.DatabaseGetResponse](
			httpClient,
			baseURL+AdminServiceDatabaseGetProcedure,
			connect.WithSchema(adminServiceMethods.ByName("DatabaseGet")),
			connect.WithClientOptions(opts...),
		),
		databaseScan: connect.NewClient[v1.DatabaseScanRequest, v1.DatabaseScanResponse](
			httpClient,
			baseURL+AdminServiceDatabaseScanProcedure,
			connect.WithSchema(adminServiceMethods.ByName("DatabaseScan")),
			connect.WithClientOptions(opts...),
		),
	}
}

// adminServiceClient implements AdminServiceClient.
type adminServiceClient struct {
	databaseGet  *connect.Client[v1.DatabaseGetRequest, v1.DatabaseGetResponse]
	databaseScan *connect.Client[v1.DatabaseScanRequest, v1.DatabaseScanResponse]
}

// DatabaseGet calls admin.v1.AdminService.DatabaseGet.
func (c *adminServiceClient) DatabaseGet(ctx context.Context, req *connect.Request[v1.DatabaseGetRequest]) (*connect.Response[v1.DatabaseGetResponse], error) {
	return c.databaseGet.CallUnary(ctx, req)
}

// DatabaseScan calls admin.v1.AdminService.DatabaseScan.
func (c *adminServiceClient) DatabaseScan(ctx context.Context, req *connect.Request[v1.DatabaseScanRequest]) (*connect.Response[v1.DatabaseScanResponse], error) {
	return c.databaseScan.CallUnary(ctx, req)
}

// AdminServiceHandler is an implementation of the admin.v1.AdminService service.
type AdminServiceHandler interface {
	// ===== Database operations (staff protected) =====
	DatabaseGet(context.Context, *connect.Request[v1.DatabaseGetRequest]) (*connect.Response[v1.DatabaseGetResponse], error)
	DatabaseScan(context.Context, *connect.Request[v1.DatabaseScanRequest]) (*connect.Response[v1.DatabaseScanResponse], error)
}

// NewAdminServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAdminServiceHandler(svc AdminServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	adminServiceMethods := v1.File_admin_v1_proto.Services().ByName("AdminService").Methods()
	adminServiceDatabaseGetHandler := connect.NewUnaryHandler(
		AdminServiceDatabaseGetProcedure,
		svc.DatabaseGet,
		connect.WithSchema(adminServiceMethods.ByName("DatabaseGet")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceDatabaseScanHandler := connect.NewUnaryHandler(
		AdminServiceDatabaseScanProcedure,
		svc.DatabaseScan,
		connect.WithSchema(adminServiceMethods.ByName("DatabaseScan")),
		connect.WithHandlerOptions(opts...),
	)
	return "/admin.v1.AdminService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AdminServiceDatabaseGetProcedure:
			adminServiceDatabaseGetHandler.ServeHTTP(w, r)
		case AdminServiceDatabaseScanProcedure:
			adminServiceDatabaseScanHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAdminServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAdminServiceHandler struct{}

func (UnimplementedAdminServiceHandler) DatabaseGet(context.Context, *connect.Request[v1.DatabaseGetRequest]) (*connect.Response[v1.DatabaseGetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.AdminService.DatabaseGet is not implemented"))
}

func (UnimplementedAdminServiceHandler) DatabaseScan(context.Context, *connect.Request[v1.DatabaseScanRequest]) (*connect.Response[v1.DatabaseScanResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.AdminService.DatabaseScan is not implemented"))
}
