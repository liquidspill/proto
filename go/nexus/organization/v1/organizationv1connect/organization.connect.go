// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: nexus/organization/v1/organization.proto

package organizationv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/liquidspill/proto/go/nexus/organization/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// OrganizationServiceName is the fully-qualified name of the OrganizationService service.
	OrganizationServiceName = "nexus.organization.v1.OrganizationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OrganizationServiceRegisterOrganizationProcedure is the fully-qualified name of the
	// OrganizationService's RegisterOrganization RPC.
	OrganizationServiceRegisterOrganizationProcedure = "/nexus.organization.v1.OrganizationService/RegisterOrganization"
	// OrganizationServiceDeregisterOrganizationProcedure is the fully-qualified name of the
	// OrganizationService's DeregisterOrganization RPC.
	OrganizationServiceDeregisterOrganizationProcedure = "/nexus.organization.v1.OrganizationService/DeregisterOrganization"
	// OrganizationServiceRegisterTeamProcedure is the fully-qualified name of the OrganizationService's
	// RegisterTeam RPC.
	OrganizationServiceRegisterTeamProcedure = "/nexus.organization.v1.OrganizationService/RegisterTeam"
	// OrganizationServiceDeregisterTeamProcedure is the fully-qualified name of the
	// OrganizationService's DeregisterTeam RPC.
	OrganizationServiceDeregisterTeamProcedure = "/nexus.organization.v1.OrganizationService/DeregisterTeam"
)

// OrganizationServiceClient is a client for the nexus.organization.v1.OrganizationService service.
type OrganizationServiceClient interface {
	RegisterOrganization(context.Context, *connect.Request[v1.RegisterOrganizationRequest]) (*connect.Response[v1.RegisterOrganizationResponse], error)
	DeregisterOrganization(context.Context, *connect.Request[v1.DeregisterOrganizationRequest]) (*connect.Response[v1.DeregisterOrganizationResponse], error)
	RegisterTeam(context.Context, *connect.Request[v1.RegisterTeamRequest]) (*connect.Response[v1.RegisterTeamResponse], error)
	DeregisterTeam(context.Context, *connect.Request[v1.DeregisterTeamRequest]) (*connect.Response[v1.DeregisterTeamResponse], error)
}

// NewOrganizationServiceClient constructs a client for the
// nexus.organization.v1.OrganizationService service. By default, it uses the Connect protocol with
// the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use
// the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOrganizationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) OrganizationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	organizationServiceMethods := v1.File_nexus_organization_v1_organization_proto.Services().ByName("OrganizationService").Methods()
	return &organizationServiceClient{
		registerOrganization: connect.NewClient[v1.RegisterOrganizationRequest, v1.RegisterOrganizationResponse](
			httpClient,
			baseURL+OrganizationServiceRegisterOrganizationProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("RegisterOrganization")),
			connect.WithClientOptions(opts...),
		),
		deregisterOrganization: connect.NewClient[v1.DeregisterOrganizationRequest, v1.DeregisterOrganizationResponse](
			httpClient,
			baseURL+OrganizationServiceDeregisterOrganizationProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("DeregisterOrganization")),
			connect.WithClientOptions(opts...),
		),
		registerTeam: connect.NewClient[v1.RegisterTeamRequest, v1.RegisterTeamResponse](
			httpClient,
			baseURL+OrganizationServiceRegisterTeamProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("RegisterTeam")),
			connect.WithClientOptions(opts...),
		),
		deregisterTeam: connect.NewClient[v1.DeregisterTeamRequest, v1.DeregisterTeamResponse](
			httpClient,
			baseURL+OrganizationServiceDeregisterTeamProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("DeregisterTeam")),
			connect.WithClientOptions(opts...),
		),
	}
}

// organizationServiceClient implements OrganizationServiceClient.
type organizationServiceClient struct {
	registerOrganization   *connect.Client[v1.RegisterOrganizationRequest, v1.RegisterOrganizationResponse]
	deregisterOrganization *connect.Client[v1.DeregisterOrganizationRequest, v1.DeregisterOrganizationResponse]
	registerTeam           *connect.Client[v1.RegisterTeamRequest, v1.RegisterTeamResponse]
	deregisterTeam         *connect.Client[v1.DeregisterTeamRequest, v1.DeregisterTeamResponse]
}

// RegisterOrganization calls nexus.organization.v1.OrganizationService.RegisterOrganization.
func (c *organizationServiceClient) RegisterOrganization(ctx context.Context, req *connect.Request[v1.RegisterOrganizationRequest]) (*connect.Response[v1.RegisterOrganizationResponse], error) {
	return c.registerOrganization.CallUnary(ctx, req)
}

// DeregisterOrganization calls nexus.organization.v1.OrganizationService.DeregisterOrganization.
func (c *organizationServiceClient) DeregisterOrganization(ctx context.Context, req *connect.Request[v1.DeregisterOrganizationRequest]) (*connect.Response[v1.DeregisterOrganizationResponse], error) {
	return c.deregisterOrganization.CallUnary(ctx, req)
}

// RegisterTeam calls nexus.organization.v1.OrganizationService.RegisterTeam.
func (c *organizationServiceClient) RegisterTeam(ctx context.Context, req *connect.Request[v1.RegisterTeamRequest]) (*connect.Response[v1.RegisterTeamResponse], error) {
	return c.registerTeam.CallUnary(ctx, req)
}

// DeregisterTeam calls nexus.organization.v1.OrganizationService.DeregisterTeam.
func (c *organizationServiceClient) DeregisterTeam(ctx context.Context, req *connect.Request[v1.DeregisterTeamRequest]) (*connect.Response[v1.DeregisterTeamResponse], error) {
	return c.deregisterTeam.CallUnary(ctx, req)
}

// OrganizationServiceHandler is an implementation of the nexus.organization.v1.OrganizationService
// service.
type OrganizationServiceHandler interface {
	RegisterOrganization(context.Context, *connect.Request[v1.RegisterOrganizationRequest]) (*connect.Response[v1.RegisterOrganizationResponse], error)
	DeregisterOrganization(context.Context, *connect.Request[v1.DeregisterOrganizationRequest]) (*connect.Response[v1.DeregisterOrganizationResponse], error)
	RegisterTeam(context.Context, *connect.Request[v1.RegisterTeamRequest]) (*connect.Response[v1.RegisterTeamResponse], error)
	DeregisterTeam(context.Context, *connect.Request[v1.DeregisterTeamRequest]) (*connect.Response[v1.DeregisterTeamResponse], error)
}

// NewOrganizationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOrganizationServiceHandler(svc OrganizationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	organizationServiceMethods := v1.File_nexus_organization_v1_organization_proto.Services().ByName("OrganizationService").Methods()
	organizationServiceRegisterOrganizationHandler := connect.NewUnaryHandler(
		OrganizationServiceRegisterOrganizationProcedure,
		svc.RegisterOrganization,
		connect.WithSchema(organizationServiceMethods.ByName("RegisterOrganization")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceDeregisterOrganizationHandler := connect.NewUnaryHandler(
		OrganizationServiceDeregisterOrganizationProcedure,
		svc.DeregisterOrganization,
		connect.WithSchema(organizationServiceMethods.ByName("DeregisterOrganization")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceRegisterTeamHandler := connect.NewUnaryHandler(
		OrganizationServiceRegisterTeamProcedure,
		svc.RegisterTeam,
		connect.WithSchema(organizationServiceMethods.ByName("RegisterTeam")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceDeregisterTeamHandler := connect.NewUnaryHandler(
		OrganizationServiceDeregisterTeamProcedure,
		svc.DeregisterTeam,
		connect.WithSchema(organizationServiceMethods.ByName("DeregisterTeam")),
		connect.WithHandlerOptions(opts...),
	)
	return "/nexus.organization.v1.OrganizationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OrganizationServiceRegisterOrganizationProcedure:
			organizationServiceRegisterOrganizationHandler.ServeHTTP(w, r)
		case OrganizationServiceDeregisterOrganizationProcedure:
			organizationServiceDeregisterOrganizationHandler.ServeHTTP(w, r)
		case OrganizationServiceRegisterTeamProcedure:
			organizationServiceRegisterTeamHandler.ServeHTTP(w, r)
		case OrganizationServiceDeregisterTeamProcedure:
			organizationServiceDeregisterTeamHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOrganizationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOrganizationServiceHandler struct{}

func (UnimplementedOrganizationServiceHandler) RegisterOrganization(context.Context, *connect.Request[v1.RegisterOrganizationRequest]) (*connect.Response[v1.RegisterOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nexus.organization.v1.OrganizationService.RegisterOrganization is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) DeregisterOrganization(context.Context, *connect.Request[v1.DeregisterOrganizationRequest]) (*connect.Response[v1.DeregisterOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nexus.organization.v1.OrganizationService.DeregisterOrganization is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) RegisterTeam(context.Context, *connect.Request[v1.RegisterTeamRequest]) (*connect.Response[v1.RegisterTeamResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nexus.organization.v1.OrganizationService.RegisterTeam is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) DeregisterTeam(context.Context, *connect.Request[v1.DeregisterTeamRequest]) (*connect.Response[v1.DeregisterTeamResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nexus.organization.v1.OrganizationService.DeregisterTeam is not implemented"))
}
