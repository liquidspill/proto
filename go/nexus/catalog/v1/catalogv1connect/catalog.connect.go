// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: nexus/catalog/v1/catalog.proto

package catalogv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/liquidspill/proto/go/nexus/catalog/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CatalogServiceName is the fully-qualified name of the CatalogService service.
	CatalogServiceName = "nexus.catalog.v1.CatalogService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CatalogServiceCreateManifestProcedure is the fully-qualified name of the CatalogService's
	// CreateManifest RPC.
	CatalogServiceCreateManifestProcedure = "/nexus.catalog.v1.CatalogService/CreateManifest"
	// CatalogServiceListManifestsProcedure is the fully-qualified name of the CatalogService's
	// ListManifests RPC.
	CatalogServiceListManifestsProcedure = "/nexus.catalog.v1.CatalogService/ListManifests"
)

// CatalogServiceClient is a client for the nexus.catalog.v1.CatalogService service.
type CatalogServiceClient interface {
	// CreateManifest registers a new Granule (data file) in the catalog.
	// This should be called after successfully writing a Parquet file to object storage.
	CreateManifest(context.Context, *connect.Request[v1.CreateManifestRequest]) (*connect.Response[v1.CreateManifestResponse], error)
	// ListManifests retrieves Granule descriptors for a given time range and scope.
	// Used by query engines to discover which data files need to be read.
	ListManifests(context.Context, *connect.Request[v1.ListManifestsRequest]) (*connect.Response[v1.ListManifestsResponse], error)
}

// NewCatalogServiceClient constructs a client for the nexus.catalog.v1.CatalogService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCatalogServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CatalogServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	catalogServiceMethods := v1.File_nexus_catalog_v1_catalog_proto.Services().ByName("CatalogService").Methods()
	return &catalogServiceClient{
		createManifest: connect.NewClient[v1.CreateManifestRequest, v1.CreateManifestResponse](
			httpClient,
			baseURL+CatalogServiceCreateManifestProcedure,
			connect.WithSchema(catalogServiceMethods.ByName("CreateManifest")),
			connect.WithClientOptions(opts...),
		),
		listManifests: connect.NewClient[v1.ListManifestsRequest, v1.ListManifestsResponse](
			httpClient,
			baseURL+CatalogServiceListManifestsProcedure,
			connect.WithSchema(catalogServiceMethods.ByName("ListManifests")),
			connect.WithClientOptions(opts...),
		),
	}
}

// catalogServiceClient implements CatalogServiceClient.
type catalogServiceClient struct {
	createManifest *connect.Client[v1.CreateManifestRequest, v1.CreateManifestResponse]
	listManifests  *connect.Client[v1.ListManifestsRequest, v1.ListManifestsResponse]
}

// CreateManifest calls nexus.catalog.v1.CatalogService.CreateManifest.
func (c *catalogServiceClient) CreateManifest(ctx context.Context, req *connect.Request[v1.CreateManifestRequest]) (*connect.Response[v1.CreateManifestResponse], error) {
	return c.createManifest.CallUnary(ctx, req)
}

// ListManifests calls nexus.catalog.v1.CatalogService.ListManifests.
func (c *catalogServiceClient) ListManifests(ctx context.Context, req *connect.Request[v1.ListManifestsRequest]) (*connect.Response[v1.ListManifestsResponse], error) {
	return c.listManifests.CallUnary(ctx, req)
}

// CatalogServiceHandler is an implementation of the nexus.catalog.v1.CatalogService service.
type CatalogServiceHandler interface {
	// CreateManifest registers a new Granule (data file) in the catalog.
	// This should be called after successfully writing a Parquet file to object storage.
	CreateManifest(context.Context, *connect.Request[v1.CreateManifestRequest]) (*connect.Response[v1.CreateManifestResponse], error)
	// ListManifests retrieves Granule descriptors for a given time range and scope.
	// Used by query engines to discover which data files need to be read.
	ListManifests(context.Context, *connect.Request[v1.ListManifestsRequest]) (*connect.Response[v1.ListManifestsResponse], error)
}

// NewCatalogServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCatalogServiceHandler(svc CatalogServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	catalogServiceMethods := v1.File_nexus_catalog_v1_catalog_proto.Services().ByName("CatalogService").Methods()
	catalogServiceCreateManifestHandler := connect.NewUnaryHandler(
		CatalogServiceCreateManifestProcedure,
		svc.CreateManifest,
		connect.WithSchema(catalogServiceMethods.ByName("CreateManifest")),
		connect.WithHandlerOptions(opts...),
	)
	catalogServiceListManifestsHandler := connect.NewUnaryHandler(
		CatalogServiceListManifestsProcedure,
		svc.ListManifests,
		connect.WithSchema(catalogServiceMethods.ByName("ListManifests")),
		connect.WithHandlerOptions(opts...),
	)
	return "/nexus.catalog.v1.CatalogService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CatalogServiceCreateManifestProcedure:
			catalogServiceCreateManifestHandler.ServeHTTP(w, r)
		case CatalogServiceListManifestsProcedure:
			catalogServiceListManifestsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCatalogServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCatalogServiceHandler struct{}

func (UnimplementedCatalogServiceHandler) CreateManifest(context.Context, *connect.Request[v1.CreateManifestRequest]) (*connect.Response[v1.CreateManifestResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nexus.catalog.v1.CatalogService.CreateManifest is not implemented"))
}

func (UnimplementedCatalogServiceHandler) ListManifests(context.Context, *connect.Request[v1.ListManifestsRequest]) (*connect.Response[v1.ListManifestsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nexus.catalog.v1.CatalogService.ListManifests is not implemented"))
}
