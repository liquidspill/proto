// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: nexus/catalog/v1/catalog.proto

package catalogv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/liquidspill/proto/go/nexus/catalog/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CatalogServiceName is the fully-qualified name of the CatalogService service.
	CatalogServiceName = "nexus.catalog.v1.CatalogService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CatalogServiceCreatePartitionProcedure is the fully-qualified name of the CatalogService's
	// CreatePartition RPC.
	CatalogServiceCreatePartitionProcedure = "/nexus.catalog.v1.CatalogService/CreatePartition"
	// CatalogServiceListPartitionsProcedure is the fully-qualified name of the CatalogService's
	// ListPartitions RPC.
	CatalogServiceListPartitionsProcedure = "/nexus.catalog.v1.CatalogService/ListPartitions"
	// CatalogServiceValidateMetadataVersionProcedure is the fully-qualified name of the
	// CatalogService's ValidateMetadataVersion RPC.
	CatalogServiceValidateMetadataVersionProcedure = "/nexus.catalog.v1.CatalogService/ValidateMetadataVersion"
	// CatalogServiceGetMetadataVersionProcedure is the fully-qualified name of the CatalogService's
	// GetMetadataVersion RPC.
	CatalogServiceGetMetadataVersionProcedure = "/nexus.catalog.v1.CatalogService/GetMetadataVersion"
	// CatalogServiceListMetadataVersionsProcedure is the fully-qualified name of the CatalogService's
	// ListMetadataVersions RPC.
	CatalogServiceListMetadataVersionsProcedure = "/nexus.catalog.v1.CatalogService/ListMetadataVersions"
)

// CatalogServiceClient is a client for the nexus.catalog.v1.CatalogService service.
type CatalogServiceClient interface {
	CreatePartition(context.Context, *connect.Request[v1.CreatePartitionRequest]) (*connect.Response[v1.CreatePartitionResponse], error)
	ListPartitions(context.Context, *connect.Request[v1.ListPartitionsRequest]) (*connect.Response[v1.ListPartitionsResponse], error)
	ValidateMetadataVersion(context.Context, *connect.Request[v1.ValidateMetadataVersionRequest]) (*connect.Response[v1.ValidateMetadataVersionResponse], error)
	GetMetadataVersion(context.Context, *connect.Request[v1.GetMetadataVersionRequest]) (*connect.Response[v1.GetMetadataVersionResponse], error)
	ListMetadataVersions(context.Context, *connect.Request[v1.ListMetadataVersionsRequest]) (*connect.Response[v1.ListMetadataVersionsResponse], error)
}

// NewCatalogServiceClient constructs a client for the nexus.catalog.v1.CatalogService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCatalogServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CatalogServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	catalogServiceMethods := v1.File_nexus_catalog_v1_catalog_proto.Services().ByName("CatalogService").Methods()
	return &catalogServiceClient{
		createPartition: connect.NewClient[v1.CreatePartitionRequest, v1.CreatePartitionResponse](
			httpClient,
			baseURL+CatalogServiceCreatePartitionProcedure,
			connect.WithSchema(catalogServiceMethods.ByName("CreatePartition")),
			connect.WithClientOptions(opts...),
		),
		listPartitions: connect.NewClient[v1.ListPartitionsRequest, v1.ListPartitionsResponse](
			httpClient,
			baseURL+CatalogServiceListPartitionsProcedure,
			connect.WithSchema(catalogServiceMethods.ByName("ListPartitions")),
			connect.WithClientOptions(opts...),
		),
		validateMetadataVersion: connect.NewClient[v1.ValidateMetadataVersionRequest, v1.ValidateMetadataVersionResponse](
			httpClient,
			baseURL+CatalogServiceValidateMetadataVersionProcedure,
			connect.WithSchema(catalogServiceMethods.ByName("ValidateMetadataVersion")),
			connect.WithClientOptions(opts...),
		),
		getMetadataVersion: connect.NewClient[v1.GetMetadataVersionRequest, v1.GetMetadataVersionResponse](
			httpClient,
			baseURL+CatalogServiceGetMetadataVersionProcedure,
			connect.WithSchema(catalogServiceMethods.ByName("GetMetadataVersion")),
			connect.WithClientOptions(opts...),
		),
		listMetadataVersions: connect.NewClient[v1.ListMetadataVersionsRequest, v1.ListMetadataVersionsResponse](
			httpClient,
			baseURL+CatalogServiceListMetadataVersionsProcedure,
			connect.WithSchema(catalogServiceMethods.ByName("ListMetadataVersions")),
			connect.WithClientOptions(opts...),
		),
	}
}

// catalogServiceClient implements CatalogServiceClient.
type catalogServiceClient struct {
	createPartition         *connect.Client[v1.CreatePartitionRequest, v1.CreatePartitionResponse]
	listPartitions          *connect.Client[v1.ListPartitionsRequest, v1.ListPartitionsResponse]
	validateMetadataVersion *connect.Client[v1.ValidateMetadataVersionRequest, v1.ValidateMetadataVersionResponse]
	getMetadataVersion      *connect.Client[v1.GetMetadataVersionRequest, v1.GetMetadataVersionResponse]
	listMetadataVersions    *connect.Client[v1.ListMetadataVersionsRequest, v1.ListMetadataVersionsResponse]
}

// CreatePartition calls nexus.catalog.v1.CatalogService.CreatePartition.
func (c *catalogServiceClient) CreatePartition(ctx context.Context, req *connect.Request[v1.CreatePartitionRequest]) (*connect.Response[v1.CreatePartitionResponse], error) {
	return c.createPartition.CallUnary(ctx, req)
}

// ListPartitions calls nexus.catalog.v1.CatalogService.ListPartitions.
func (c *catalogServiceClient) ListPartitions(ctx context.Context, req *connect.Request[v1.ListPartitionsRequest]) (*connect.Response[v1.ListPartitionsResponse], error) {
	return c.listPartitions.CallUnary(ctx, req)
}

// ValidateMetadataVersion calls nexus.catalog.v1.CatalogService.ValidateMetadataVersion.
func (c *catalogServiceClient) ValidateMetadataVersion(ctx context.Context, req *connect.Request[v1.ValidateMetadataVersionRequest]) (*connect.Response[v1.ValidateMetadataVersionResponse], error) {
	return c.validateMetadataVersion.CallUnary(ctx, req)
}

// GetMetadataVersion calls nexus.catalog.v1.CatalogService.GetMetadataVersion.
func (c *catalogServiceClient) GetMetadataVersion(ctx context.Context, req *connect.Request[v1.GetMetadataVersionRequest]) (*connect.Response[v1.GetMetadataVersionResponse], error) {
	return c.getMetadataVersion.CallUnary(ctx, req)
}

// ListMetadataVersions calls nexus.catalog.v1.CatalogService.ListMetadataVersions.
func (c *catalogServiceClient) ListMetadataVersions(ctx context.Context, req *connect.Request[v1.ListMetadataVersionsRequest]) (*connect.Response[v1.ListMetadataVersionsResponse], error) {
	return c.listMetadataVersions.CallUnary(ctx, req)
}

// CatalogServiceHandler is an implementation of the nexus.catalog.v1.CatalogService service.
type CatalogServiceHandler interface {
	CreatePartition(context.Context, *connect.Request[v1.CreatePartitionRequest]) (*connect.Response[v1.CreatePartitionResponse], error)
	ListPartitions(context.Context, *connect.Request[v1.ListPartitionsRequest]) (*connect.Response[v1.ListPartitionsResponse], error)
	ValidateMetadataVersion(context.Context, *connect.Request[v1.ValidateMetadataVersionRequest]) (*connect.Response[v1.ValidateMetadataVersionResponse], error)
	GetMetadataVersion(context.Context, *connect.Request[v1.GetMetadataVersionRequest]) (*connect.Response[v1.GetMetadataVersionResponse], error)
	ListMetadataVersions(context.Context, *connect.Request[v1.ListMetadataVersionsRequest]) (*connect.Response[v1.ListMetadataVersionsResponse], error)
}

// NewCatalogServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCatalogServiceHandler(svc CatalogServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	catalogServiceMethods := v1.File_nexus_catalog_v1_catalog_proto.Services().ByName("CatalogService").Methods()
	catalogServiceCreatePartitionHandler := connect.NewUnaryHandler(
		CatalogServiceCreatePartitionProcedure,
		svc.CreatePartition,
		connect.WithSchema(catalogServiceMethods.ByName("CreatePartition")),
		connect.WithHandlerOptions(opts...),
	)
	catalogServiceListPartitionsHandler := connect.NewUnaryHandler(
		CatalogServiceListPartitionsProcedure,
		svc.ListPartitions,
		connect.WithSchema(catalogServiceMethods.ByName("ListPartitions")),
		connect.WithHandlerOptions(opts...),
	)
	catalogServiceValidateMetadataVersionHandler := connect.NewUnaryHandler(
		CatalogServiceValidateMetadataVersionProcedure,
		svc.ValidateMetadataVersion,
		connect.WithSchema(catalogServiceMethods.ByName("ValidateMetadataVersion")),
		connect.WithHandlerOptions(opts...),
	)
	catalogServiceGetMetadataVersionHandler := connect.NewUnaryHandler(
		CatalogServiceGetMetadataVersionProcedure,
		svc.GetMetadataVersion,
		connect.WithSchema(catalogServiceMethods.ByName("GetMetadataVersion")),
		connect.WithHandlerOptions(opts...),
	)
	catalogServiceListMetadataVersionsHandler := connect.NewUnaryHandler(
		CatalogServiceListMetadataVersionsProcedure,
		svc.ListMetadataVersions,
		connect.WithSchema(catalogServiceMethods.ByName("ListMetadataVersions")),
		connect.WithHandlerOptions(opts...),
	)
	return "/nexus.catalog.v1.CatalogService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CatalogServiceCreatePartitionProcedure:
			catalogServiceCreatePartitionHandler.ServeHTTP(w, r)
		case CatalogServiceListPartitionsProcedure:
			catalogServiceListPartitionsHandler.ServeHTTP(w, r)
		case CatalogServiceValidateMetadataVersionProcedure:
			catalogServiceValidateMetadataVersionHandler.ServeHTTP(w, r)
		case CatalogServiceGetMetadataVersionProcedure:
			catalogServiceGetMetadataVersionHandler.ServeHTTP(w, r)
		case CatalogServiceListMetadataVersionsProcedure:
			catalogServiceListMetadataVersionsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCatalogServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCatalogServiceHandler struct{}

func (UnimplementedCatalogServiceHandler) CreatePartition(context.Context, *connect.Request[v1.CreatePartitionRequest]) (*connect.Response[v1.CreatePartitionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nexus.catalog.v1.CatalogService.CreatePartition is not implemented"))
}

func (UnimplementedCatalogServiceHandler) ListPartitions(context.Context, *connect.Request[v1.ListPartitionsRequest]) (*connect.Response[v1.ListPartitionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nexus.catalog.v1.CatalogService.ListPartitions is not implemented"))
}

func (UnimplementedCatalogServiceHandler) ValidateMetadataVersion(context.Context, *connect.Request[v1.ValidateMetadataVersionRequest]) (*connect.Response[v1.ValidateMetadataVersionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nexus.catalog.v1.CatalogService.ValidateMetadataVersion is not implemented"))
}

func (UnimplementedCatalogServiceHandler) GetMetadataVersion(context.Context, *connect.Request[v1.GetMetadataVersionRequest]) (*connect.Response[v1.GetMetadataVersionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nexus.catalog.v1.CatalogService.GetMetadataVersion is not implemented"))
}

func (UnimplementedCatalogServiceHandler) ListMetadataVersions(context.Context, *connect.Request[v1.ListMetadataVersionsRequest]) (*connect.Response[v1.ListMetadataVersionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nexus.catalog.v1.CatalogService.ListMetadataVersions is not implemented"))
}
