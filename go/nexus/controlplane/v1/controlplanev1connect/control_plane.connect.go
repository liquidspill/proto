// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: nexus/controlplane/v1/control_plane.proto

package controlplanev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/liquidspill/proto/go/nexus/controlplane/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ControlPlaneServiceName is the fully-qualified name of the ControlPlaneService service.
	ControlPlaneServiceName = "nexus.controlplane.v1.ControlPlaneService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ControlPlaneServiceCreateClusterProcedure is the fully-qualified name of the
	// ControlPlaneService's CreateCluster RPC.
	ControlPlaneServiceCreateClusterProcedure = "/nexus.controlplane.v1.ControlPlaneService/CreateCluster"
	// ControlPlaneServiceDeleteClusterProcedure is the fully-qualified name of the
	// ControlPlaneService's DeleteCluster RPC.
	ControlPlaneServiceDeleteClusterProcedure = "/nexus.controlplane.v1.ControlPlaneService/DeleteCluster"
	// ControlPlaneServiceListClustersProcedure is the fully-qualified name of the ControlPlaneService's
	// ListClusters RPC.
	ControlPlaneServiceListClustersProcedure = "/nexus.controlplane.v1.ControlPlaneService/ListClusters"
	// ControlPlaneServiceGetClusterProcedure is the fully-qualified name of the ControlPlaneService's
	// GetCluster RPC.
	ControlPlaneServiceGetClusterProcedure = "/nexus.controlplane.v1.ControlPlaneService/GetCluster"
	// ControlPlaneServiceCreateDeviceProcedure is the fully-qualified name of the ControlPlaneService's
	// CreateDevice RPC.
	ControlPlaneServiceCreateDeviceProcedure = "/nexus.controlplane.v1.ControlPlaneService/CreateDevice"
	// ControlPlaneServiceDeleteDeviceProcedure is the fully-qualified name of the ControlPlaneService's
	// DeleteDevice RPC.
	ControlPlaneServiceDeleteDeviceProcedure = "/nexus.controlplane.v1.ControlPlaneService/DeleteDevice"
	// ControlPlaneServiceUpdateDeviceProcedure is the fully-qualified name of the ControlPlaneService's
	// UpdateDevice RPC.
	ControlPlaneServiceUpdateDeviceProcedure = "/nexus.controlplane.v1.ControlPlaneService/UpdateDevice"
	// ControlPlaneServiceListDevicesProcedure is the fully-qualified name of the ControlPlaneService's
	// ListDevices RPC.
	ControlPlaneServiceListDevicesProcedure = "/nexus.controlplane.v1.ControlPlaneService/ListDevices"
	// ControlPlaneServiceGetDeviceProcedure is the fully-qualified name of the ControlPlaneService's
	// GetDevice RPC.
	ControlPlaneServiceGetDeviceProcedure = "/nexus.controlplane.v1.ControlPlaneService/GetDevice"
	// ControlPlaneServiceCreateQueryProcedure is the fully-qualified name of the ControlPlaneService's
	// CreateQuery RPC.
	ControlPlaneServiceCreateQueryProcedure = "/nexus.controlplane.v1.ControlPlaneService/CreateQuery"
	// ControlPlaneServiceSubmitQueryExecutionProcedure is the fully-qualified name of the
	// ControlPlaneService's SubmitQueryExecution RPC.
	ControlPlaneServiceSubmitQueryExecutionProcedure = "/nexus.controlplane.v1.ControlPlaneService/SubmitQueryExecution"
	// ControlPlaneServiceUpdateQueryExecutionProcedure is the fully-qualified name of the
	// ControlPlaneService's UpdateQueryExecution RPC.
	ControlPlaneServiceUpdateQueryExecutionProcedure = "/nexus.controlplane.v1.ControlPlaneService/UpdateQueryExecution"
	// ControlPlaneServicePollQueryExecutionProcedure is the fully-qualified name of the
	// ControlPlaneService's PollQueryExecution RPC.
	ControlPlaneServicePollQueryExecutionProcedure = "/nexus.controlplane.v1.ControlPlaneService/PollQueryExecution"
	// ControlPlaneServiceHeartbeatProcedure is the fully-qualified name of the ControlPlaneService's
	// Heartbeat RPC.
	ControlPlaneServiceHeartbeatProcedure = "/nexus.controlplane.v1.ControlPlaneService/Heartbeat"
)

// ControlPlaneServiceClient is a client for the nexus.controlplane.v1.ControlPlaneService service.
type ControlPlaneServiceClient interface {
	// Cluster management
	CreateCluster(context.Context, *connect.Request[v1.CreateClusterRequest]) (*connect.Response[v1.CreateClusterResponse], error)
	DeleteCluster(context.Context, *connect.Request[v1.DeleteClusterRequest]) (*connect.Response[v1.DeleteClusterResponse], error)
	ListClusters(context.Context, *connect.Request[v1.ListClustersRequest]) (*connect.Response[v1.ListClustersResponse], error)
	GetCluster(context.Context, *connect.Request[v1.GetClusterRequest]) (*connect.Response[v1.GetClusterResponse], error)
	// Device management
	CreateDevice(context.Context, *connect.Request[v1.CreateDeviceRequest]) (*connect.Response[v1.CreateDeviceResponse], error)
	DeleteDevice(context.Context, *connect.Request[v1.DeleteDeviceRequest]) (*connect.Response[v1.DeleteDeviceResponse], error)
	UpdateDevice(context.Context, *connect.Request[v1.UpdateDeviceRequest]) (*connect.Response[v1.UpdateDeviceResponse], error)
	ListDevices(context.Context, *connect.Request[v1.ListDevicesRequest]) (*connect.Response[v1.ListDevicesResponse], error)
	GetDevice(context.Context, *connect.Request[v1.GetDeviceRequest]) (*connect.Response[v1.GetDeviceResponse], error)
	// Query management
	CreateQuery(context.Context, *connect.Request[v1.CreateQueryRequest]) (*connect.Response[v1.CreateQueryResponse], error)
	// Starts the execution of a given query (nexus -> fluid)
	SubmitQueryExecution(context.Context, *connect.Request[v1.SubmitQueryExecutionRequest]) (*connect.Response[v1.SubmitQueryExecutionResponse], error)
	// Registers updates of a query (fluid -> nexus)
	UpdateQueryExecution(context.Context, *connect.Request[v1.UpdateQueryExecutionRequest]) (*connect.Response[v1.UpdateQueryExecutionResponse], error)
	// Poll the query execution job. Used by the client to get the status of
	// a query. If it is complete, the result will be returned alongside it.
	PollQueryExecution(context.Context, *connect.Request[v1.PollQueryExecutionRequest]) (*connect.Response[v1.PollQueryExecutionResponse], error)
	Heartbeat(context.Context, *connect.Request[v1.HeartbeatRequest]) (*connect.Response[v1.HeartbeatResponse], error)
}

// NewControlPlaneServiceClient constructs a client for the
// nexus.controlplane.v1.ControlPlaneService service. By default, it uses the Connect protocol with
// the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use
// the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewControlPlaneServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ControlPlaneServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	controlPlaneServiceMethods := v1.File_nexus_controlplane_v1_control_plane_proto.Services().ByName("ControlPlaneService").Methods()
	return &controlPlaneServiceClient{
		createCluster: connect.NewClient[v1.CreateClusterRequest, v1.CreateClusterResponse](
			httpClient,
			baseURL+ControlPlaneServiceCreateClusterProcedure,
			connect.WithSchema(controlPlaneServiceMethods.ByName("CreateCluster")),
			connect.WithClientOptions(opts...),
		),
		deleteCluster: connect.NewClient[v1.DeleteClusterRequest, v1.DeleteClusterResponse](
			httpClient,
			baseURL+ControlPlaneServiceDeleteClusterProcedure,
			connect.WithSchema(controlPlaneServiceMethods.ByName("DeleteCluster")),
			connect.WithClientOptions(opts...),
		),
		listClusters: connect.NewClient[v1.ListClustersRequest, v1.ListClustersResponse](
			httpClient,
			baseURL+ControlPlaneServiceListClustersProcedure,
			connect.WithSchema(controlPlaneServiceMethods.ByName("ListClusters")),
			connect.WithClientOptions(opts...),
		),
		getCluster: connect.NewClient[v1.GetClusterRequest, v1.GetClusterResponse](
			httpClient,
			baseURL+ControlPlaneServiceGetClusterProcedure,
			connect.WithSchema(controlPlaneServiceMethods.ByName("GetCluster")),
			connect.WithClientOptions(opts...),
		),
		createDevice: connect.NewClient[v1.CreateDeviceRequest, v1.CreateDeviceResponse](
			httpClient,
			baseURL+ControlPlaneServiceCreateDeviceProcedure,
			connect.WithSchema(controlPlaneServiceMethods.ByName("CreateDevice")),
			connect.WithClientOptions(opts...),
		),
		deleteDevice: connect.NewClient[v1.DeleteDeviceRequest, v1.DeleteDeviceResponse](
			httpClient,
			baseURL+ControlPlaneServiceDeleteDeviceProcedure,
			connect.WithSchema(controlPlaneServiceMethods.ByName("DeleteDevice")),
			connect.WithClientOptions(opts...),
		),
		updateDevice: connect.NewClient[v1.UpdateDeviceRequest, v1.UpdateDeviceResponse](
			httpClient,
			baseURL+ControlPlaneServiceUpdateDeviceProcedure,
			connect.WithSchema(controlPlaneServiceMethods.ByName("UpdateDevice")),
			connect.WithClientOptions(opts...),
		),
		listDevices: connect.NewClient[v1.ListDevicesRequest, v1.ListDevicesResponse](
			httpClient,
			baseURL+ControlPlaneServiceListDevicesProcedure,
			connect.WithSchema(controlPlaneServiceMethods.ByName("ListDevices")),
			connect.WithClientOptions(opts...),
		),
		getDevice: connect.NewClient[v1.GetDeviceRequest, v1.GetDeviceResponse](
			httpClient,
			baseURL+ControlPlaneServiceGetDeviceProcedure,
			connect.WithSchema(controlPlaneServiceMethods.ByName("GetDevice")),
			connect.WithClientOptions(opts...),
		),
		createQuery: connect.NewClient[v1.CreateQueryRequest, v1.CreateQueryResponse](
			httpClient,
			baseURL+ControlPlaneServiceCreateQueryProcedure,
			connect.WithSchema(controlPlaneServiceMethods.ByName("CreateQuery")),
			connect.WithClientOptions(opts...),
		),
		submitQueryExecution: connect.NewClient[v1.SubmitQueryExecutionRequest, v1.SubmitQueryExecutionResponse](
			httpClient,
			baseURL+ControlPlaneServiceSubmitQueryExecutionProcedure,
			connect.WithSchema(controlPlaneServiceMethods.ByName("SubmitQueryExecution")),
			connect.WithClientOptions(opts...),
		),
		updateQueryExecution: connect.NewClient[v1.UpdateQueryExecutionRequest, v1.UpdateQueryExecutionResponse](
			httpClient,
			baseURL+ControlPlaneServiceUpdateQueryExecutionProcedure,
			connect.WithSchema(controlPlaneServiceMethods.ByName("UpdateQueryExecution")),
			connect.WithClientOptions(opts...),
		),
		pollQueryExecution: connect.NewClient[v1.PollQueryExecutionRequest, v1.PollQueryExecutionResponse](
			httpClient,
			baseURL+ControlPlaneServicePollQueryExecutionProcedure,
			connect.WithSchema(controlPlaneServiceMethods.ByName("PollQueryExecution")),
			connect.WithClientOptions(opts...),
		),
		heartbeat: connect.NewClient[v1.HeartbeatRequest, v1.HeartbeatResponse](
			httpClient,
			baseURL+ControlPlaneServiceHeartbeatProcedure,
			connect.WithSchema(controlPlaneServiceMethods.ByName("Heartbeat")),
			connect.WithClientOptions(opts...),
		),
	}
}

// controlPlaneServiceClient implements ControlPlaneServiceClient.
type controlPlaneServiceClient struct {
	createCluster        *connect.Client[v1.CreateClusterRequest, v1.CreateClusterResponse]
	deleteCluster        *connect.Client[v1.DeleteClusterRequest, v1.DeleteClusterResponse]
	listClusters         *connect.Client[v1.ListClustersRequest, v1.ListClustersResponse]
	getCluster           *connect.Client[v1.GetClusterRequest, v1.GetClusterResponse]
	createDevice         *connect.Client[v1.CreateDeviceRequest, v1.CreateDeviceResponse]
	deleteDevice         *connect.Client[v1.DeleteDeviceRequest, v1.DeleteDeviceResponse]
	updateDevice         *connect.Client[v1.UpdateDeviceRequest, v1.UpdateDeviceResponse]
	listDevices          *connect.Client[v1.ListDevicesRequest, v1.ListDevicesResponse]
	getDevice            *connect.Client[v1.GetDeviceRequest, v1.GetDeviceResponse]
	createQuery          *connect.Client[v1.CreateQueryRequest, v1.CreateQueryResponse]
	submitQueryExecution *connect.Client[v1.SubmitQueryExecutionRequest, v1.SubmitQueryExecutionResponse]
	updateQueryExecution *connect.Client[v1.UpdateQueryExecutionRequest, v1.UpdateQueryExecutionResponse]
	pollQueryExecution   *connect.Client[v1.PollQueryExecutionRequest, v1.PollQueryExecutionResponse]
	heartbeat            *connect.Client[v1.HeartbeatRequest, v1.HeartbeatResponse]
}

// CreateCluster calls nexus.controlplane.v1.ControlPlaneService.CreateCluster.
func (c *controlPlaneServiceClient) CreateCluster(ctx context.Context, req *connect.Request[v1.CreateClusterRequest]) (*connect.Response[v1.CreateClusterResponse], error) {
	return c.createCluster.CallUnary(ctx, req)
}

// DeleteCluster calls nexus.controlplane.v1.ControlPlaneService.DeleteCluster.
func (c *controlPlaneServiceClient) DeleteCluster(ctx context.Context, req *connect.Request[v1.DeleteClusterRequest]) (*connect.Response[v1.DeleteClusterResponse], error) {
	return c.deleteCluster.CallUnary(ctx, req)
}

// ListClusters calls nexus.controlplane.v1.ControlPlaneService.ListClusters.
func (c *controlPlaneServiceClient) ListClusters(ctx context.Context, req *connect.Request[v1.ListClustersRequest]) (*connect.Response[v1.ListClustersResponse], error) {
	return c.listClusters.CallUnary(ctx, req)
}

// GetCluster calls nexus.controlplane.v1.ControlPlaneService.GetCluster.
func (c *controlPlaneServiceClient) GetCluster(ctx context.Context, req *connect.Request[v1.GetClusterRequest]) (*connect.Response[v1.GetClusterResponse], error) {
	return c.getCluster.CallUnary(ctx, req)
}

// CreateDevice calls nexus.controlplane.v1.ControlPlaneService.CreateDevice.
func (c *controlPlaneServiceClient) CreateDevice(ctx context.Context, req *connect.Request[v1.CreateDeviceRequest]) (*connect.Response[v1.CreateDeviceResponse], error) {
	return c.createDevice.CallUnary(ctx, req)
}

// DeleteDevice calls nexus.controlplane.v1.ControlPlaneService.DeleteDevice.
func (c *controlPlaneServiceClient) DeleteDevice(ctx context.Context, req *connect.Request[v1.DeleteDeviceRequest]) (*connect.Response[v1.DeleteDeviceResponse], error) {
	return c.deleteDevice.CallUnary(ctx, req)
}

// UpdateDevice calls nexus.controlplane.v1.ControlPlaneService.UpdateDevice.
func (c *controlPlaneServiceClient) UpdateDevice(ctx context.Context, req *connect.Request[v1.UpdateDeviceRequest]) (*connect.Response[v1.UpdateDeviceResponse], error) {
	return c.updateDevice.CallUnary(ctx, req)
}

// ListDevices calls nexus.controlplane.v1.ControlPlaneService.ListDevices.
func (c *controlPlaneServiceClient) ListDevices(ctx context.Context, req *connect.Request[v1.ListDevicesRequest]) (*connect.Response[v1.ListDevicesResponse], error) {
	return c.listDevices.CallUnary(ctx, req)
}

// GetDevice calls nexus.controlplane.v1.ControlPlaneService.GetDevice.
func (c *controlPlaneServiceClient) GetDevice(ctx context.Context, req *connect.Request[v1.GetDeviceRequest]) (*connect.Response[v1.GetDeviceResponse], error) {
	return c.getDevice.CallUnary(ctx, req)
}

// CreateQuery calls nexus.controlplane.v1.ControlPlaneService.CreateQuery.
func (c *controlPlaneServiceClient) CreateQuery(ctx context.Context, req *connect.Request[v1.CreateQueryRequest]) (*connect.Response[v1.CreateQueryResponse], error) {
	return c.createQuery.CallUnary(ctx, req)
}

// SubmitQueryExecution calls nexus.controlplane.v1.ControlPlaneService.SubmitQueryExecution.
func (c *controlPlaneServiceClient) SubmitQueryExecution(ctx context.Context, req *connect.Request[v1.SubmitQueryExecutionRequest]) (*connect.Response[v1.SubmitQueryExecutionResponse], error) {
	return c.submitQueryExecution.CallUnary(ctx, req)
}

// UpdateQueryExecution calls nexus.controlplane.v1.ControlPlaneService.UpdateQueryExecution.
func (c *controlPlaneServiceClient) UpdateQueryExecution(ctx context.Context, req *connect.Request[v1.UpdateQueryExecutionRequest]) (*connect.Response[v1.UpdateQueryExecutionResponse], error) {
	return c.updateQueryExecution.CallUnary(ctx, req)
}

// PollQueryExecution calls nexus.controlplane.v1.ControlPlaneService.PollQueryExecution.
func (c *controlPlaneServiceClient) PollQueryExecution(ctx context.Context, req *connect.Request[v1.PollQueryExecutionRequest]) (*connect.Response[v1.PollQueryExecutionResponse], error) {
	return c.pollQueryExecution.CallUnary(ctx, req)
}

// Heartbeat calls nexus.controlplane.v1.ControlPlaneService.Heartbeat.
func (c *controlPlaneServiceClient) Heartbeat(ctx context.Context, req *connect.Request[v1.HeartbeatRequest]) (*connect.Response[v1.HeartbeatResponse], error) {
	return c.heartbeat.CallUnary(ctx, req)
}

// ControlPlaneServiceHandler is an implementation of the nexus.controlplane.v1.ControlPlaneService
// service.
type ControlPlaneServiceHandler interface {
	// Cluster management
	CreateCluster(context.Context, *connect.Request[v1.CreateClusterRequest]) (*connect.Response[v1.CreateClusterResponse], error)
	DeleteCluster(context.Context, *connect.Request[v1.DeleteClusterRequest]) (*connect.Response[v1.DeleteClusterResponse], error)
	ListClusters(context.Context, *connect.Request[v1.ListClustersRequest]) (*connect.Response[v1.ListClustersResponse], error)
	GetCluster(context.Context, *connect.Request[v1.GetClusterRequest]) (*connect.Response[v1.GetClusterResponse], error)
	// Device management
	CreateDevice(context.Context, *connect.Request[v1.CreateDeviceRequest]) (*connect.Response[v1.CreateDeviceResponse], error)
	DeleteDevice(context.Context, *connect.Request[v1.DeleteDeviceRequest]) (*connect.Response[v1.DeleteDeviceResponse], error)
	UpdateDevice(context.Context, *connect.Request[v1.UpdateDeviceRequest]) (*connect.Response[v1.UpdateDeviceResponse], error)
	ListDevices(context.Context, *connect.Request[v1.ListDevicesRequest]) (*connect.Response[v1.ListDevicesResponse], error)
	GetDevice(context.Context, *connect.Request[v1.GetDeviceRequest]) (*connect.Response[v1.GetDeviceResponse], error)
	// Query management
	CreateQuery(context.Context, *connect.Request[v1.CreateQueryRequest]) (*connect.Response[v1.CreateQueryResponse], error)
	// Starts the execution of a given query (nexus -> fluid)
	SubmitQueryExecution(context.Context, *connect.Request[v1.SubmitQueryExecutionRequest]) (*connect.Response[v1.SubmitQueryExecutionResponse], error)
	// Registers updates of a query (fluid -> nexus)
	UpdateQueryExecution(context.Context, *connect.Request[v1.UpdateQueryExecutionRequest]) (*connect.Response[v1.UpdateQueryExecutionResponse], error)
	// Poll the query execution job. Used by the client to get the status of
	// a query. If it is complete, the result will be returned alongside it.
	PollQueryExecution(context.Context, *connect.Request[v1.PollQueryExecutionRequest]) (*connect.Response[v1.PollQueryExecutionResponse], error)
	Heartbeat(context.Context, *connect.Request[v1.HeartbeatRequest]) (*connect.Response[v1.HeartbeatResponse], error)
}

// NewControlPlaneServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewControlPlaneServiceHandler(svc ControlPlaneServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	controlPlaneServiceMethods := v1.File_nexus_controlplane_v1_control_plane_proto.Services().ByName("ControlPlaneService").Methods()
	controlPlaneServiceCreateClusterHandler := connect.NewUnaryHandler(
		ControlPlaneServiceCreateClusterProcedure,
		svc.CreateCluster,
		connect.WithSchema(controlPlaneServiceMethods.ByName("CreateCluster")),
		connect.WithHandlerOptions(opts...),
	)
	controlPlaneServiceDeleteClusterHandler := connect.NewUnaryHandler(
		ControlPlaneServiceDeleteClusterProcedure,
		svc.DeleteCluster,
		connect.WithSchema(controlPlaneServiceMethods.ByName("DeleteCluster")),
		connect.WithHandlerOptions(opts...),
	)
	controlPlaneServiceListClustersHandler := connect.NewUnaryHandler(
		ControlPlaneServiceListClustersProcedure,
		svc.ListClusters,
		connect.WithSchema(controlPlaneServiceMethods.ByName("ListClusters")),
		connect.WithHandlerOptions(opts...),
	)
	controlPlaneServiceGetClusterHandler := connect.NewUnaryHandler(
		ControlPlaneServiceGetClusterProcedure,
		svc.GetCluster,
		connect.WithSchema(controlPlaneServiceMethods.ByName("GetCluster")),
		connect.WithHandlerOptions(opts...),
	)
	controlPlaneServiceCreateDeviceHandler := connect.NewUnaryHandler(
		ControlPlaneServiceCreateDeviceProcedure,
		svc.CreateDevice,
		connect.WithSchema(controlPlaneServiceMethods.ByName("CreateDevice")),
		connect.WithHandlerOptions(opts...),
	)
	controlPlaneServiceDeleteDeviceHandler := connect.NewUnaryHandler(
		ControlPlaneServiceDeleteDeviceProcedure,
		svc.DeleteDevice,
		connect.WithSchema(controlPlaneServiceMethods.ByName("DeleteDevice")),
		connect.WithHandlerOptions(opts...),
	)
	controlPlaneServiceUpdateDeviceHandler := connect.NewUnaryHandler(
		ControlPlaneServiceUpdateDeviceProcedure,
		svc.UpdateDevice,
		connect.WithSchema(controlPlaneServiceMethods.ByName("UpdateDevice")),
		connect.WithHandlerOptions(opts...),
	)
	controlPlaneServiceListDevicesHandler := connect.NewUnaryHandler(
		ControlPlaneServiceListDevicesProcedure,
		svc.ListDevices,
		connect.WithSchema(controlPlaneServiceMethods.ByName("ListDevices")),
		connect.WithHandlerOptions(opts...),
	)
	controlPlaneServiceGetDeviceHandler := connect.NewUnaryHandler(
		ControlPlaneServiceGetDeviceProcedure,
		svc.GetDevice,
		connect.WithSchema(controlPlaneServiceMethods.ByName("GetDevice")),
		connect.WithHandlerOptions(opts...),
	)
	controlPlaneServiceCreateQueryHandler := connect.NewUnaryHandler(
		ControlPlaneServiceCreateQueryProcedure,
		svc.CreateQuery,
		connect.WithSchema(controlPlaneServiceMethods.ByName("CreateQuery")),
		connect.WithHandlerOptions(opts...),
	)
	controlPlaneServiceSubmitQueryExecutionHandler := connect.NewUnaryHandler(
		ControlPlaneServiceSubmitQueryExecutionProcedure,
		svc.SubmitQueryExecution,
		connect.WithSchema(controlPlaneServiceMethods.ByName("SubmitQueryExecution")),
		connect.WithHandlerOptions(opts...),
	)
	controlPlaneServiceUpdateQueryExecutionHandler := connect.NewUnaryHandler(
		ControlPlaneServiceUpdateQueryExecutionProcedure,
		svc.UpdateQueryExecution,
		connect.WithSchema(controlPlaneServiceMethods.ByName("UpdateQueryExecution")),
		connect.WithHandlerOptions(opts...),
	)
	controlPlaneServicePollQueryExecutionHandler := connect.NewUnaryHandler(
		ControlPlaneServicePollQueryExecutionProcedure,
		svc.PollQueryExecution,
		connect.WithSchema(controlPlaneServiceMethods.ByName("PollQueryExecution")),
		connect.WithHandlerOptions(opts...),
	)
	controlPlaneServiceHeartbeatHandler := connect.NewUnaryHandler(
		ControlPlaneServiceHeartbeatProcedure,
		svc.Heartbeat,
		connect.WithSchema(controlPlaneServiceMethods.ByName("Heartbeat")),
		connect.WithHandlerOptions(opts...),
	)
	return "/nexus.controlplane.v1.ControlPlaneService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ControlPlaneServiceCreateClusterProcedure:
			controlPlaneServiceCreateClusterHandler.ServeHTTP(w, r)
		case ControlPlaneServiceDeleteClusterProcedure:
			controlPlaneServiceDeleteClusterHandler.ServeHTTP(w, r)
		case ControlPlaneServiceListClustersProcedure:
			controlPlaneServiceListClustersHandler.ServeHTTP(w, r)
		case ControlPlaneServiceGetClusterProcedure:
			controlPlaneServiceGetClusterHandler.ServeHTTP(w, r)
		case ControlPlaneServiceCreateDeviceProcedure:
			controlPlaneServiceCreateDeviceHandler.ServeHTTP(w, r)
		case ControlPlaneServiceDeleteDeviceProcedure:
			controlPlaneServiceDeleteDeviceHandler.ServeHTTP(w, r)
		case ControlPlaneServiceUpdateDeviceProcedure:
			controlPlaneServiceUpdateDeviceHandler.ServeHTTP(w, r)
		case ControlPlaneServiceListDevicesProcedure:
			controlPlaneServiceListDevicesHandler.ServeHTTP(w, r)
		case ControlPlaneServiceGetDeviceProcedure:
			controlPlaneServiceGetDeviceHandler.ServeHTTP(w, r)
		case ControlPlaneServiceCreateQueryProcedure:
			controlPlaneServiceCreateQueryHandler.ServeHTTP(w, r)
		case ControlPlaneServiceSubmitQueryExecutionProcedure:
			controlPlaneServiceSubmitQueryExecutionHandler.ServeHTTP(w, r)
		case ControlPlaneServiceUpdateQueryExecutionProcedure:
			controlPlaneServiceUpdateQueryExecutionHandler.ServeHTTP(w, r)
		case ControlPlaneServicePollQueryExecutionProcedure:
			controlPlaneServicePollQueryExecutionHandler.ServeHTTP(w, r)
		case ControlPlaneServiceHeartbeatProcedure:
			controlPlaneServiceHeartbeatHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedControlPlaneServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedControlPlaneServiceHandler struct{}

func (UnimplementedControlPlaneServiceHandler) CreateCluster(context.Context, *connect.Request[v1.CreateClusterRequest]) (*connect.Response[v1.CreateClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nexus.controlplane.v1.ControlPlaneService.CreateCluster is not implemented"))
}

func (UnimplementedControlPlaneServiceHandler) DeleteCluster(context.Context, *connect.Request[v1.DeleteClusterRequest]) (*connect.Response[v1.DeleteClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nexus.controlplane.v1.ControlPlaneService.DeleteCluster is not implemented"))
}

func (UnimplementedControlPlaneServiceHandler) ListClusters(context.Context, *connect.Request[v1.ListClustersRequest]) (*connect.Response[v1.ListClustersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nexus.controlplane.v1.ControlPlaneService.ListClusters is not implemented"))
}

func (UnimplementedControlPlaneServiceHandler) GetCluster(context.Context, *connect.Request[v1.GetClusterRequest]) (*connect.Response[v1.GetClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nexus.controlplane.v1.ControlPlaneService.GetCluster is not implemented"))
}

func (UnimplementedControlPlaneServiceHandler) CreateDevice(context.Context, *connect.Request[v1.CreateDeviceRequest]) (*connect.Response[v1.CreateDeviceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nexus.controlplane.v1.ControlPlaneService.CreateDevice is not implemented"))
}

func (UnimplementedControlPlaneServiceHandler) DeleteDevice(context.Context, *connect.Request[v1.DeleteDeviceRequest]) (*connect.Response[v1.DeleteDeviceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nexus.controlplane.v1.ControlPlaneService.DeleteDevice is not implemented"))
}

func (UnimplementedControlPlaneServiceHandler) UpdateDevice(context.Context, *connect.Request[v1.UpdateDeviceRequest]) (*connect.Response[v1.UpdateDeviceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nexus.controlplane.v1.ControlPlaneService.UpdateDevice is not implemented"))
}

func (UnimplementedControlPlaneServiceHandler) ListDevices(context.Context, *connect.Request[v1.ListDevicesRequest]) (*connect.Response[v1.ListDevicesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nexus.controlplane.v1.ControlPlaneService.ListDevices is not implemented"))
}

func (UnimplementedControlPlaneServiceHandler) GetDevice(context.Context, *connect.Request[v1.GetDeviceRequest]) (*connect.Response[v1.GetDeviceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nexus.controlplane.v1.ControlPlaneService.GetDevice is not implemented"))
}

func (UnimplementedControlPlaneServiceHandler) CreateQuery(context.Context, *connect.Request[v1.CreateQueryRequest]) (*connect.Response[v1.CreateQueryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nexus.controlplane.v1.ControlPlaneService.CreateQuery is not implemented"))
}

func (UnimplementedControlPlaneServiceHandler) SubmitQueryExecution(context.Context, *connect.Request[v1.SubmitQueryExecutionRequest]) (*connect.Response[v1.SubmitQueryExecutionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nexus.controlplane.v1.ControlPlaneService.SubmitQueryExecution is not implemented"))
}

func (UnimplementedControlPlaneServiceHandler) UpdateQueryExecution(context.Context, *connect.Request[v1.UpdateQueryExecutionRequest]) (*connect.Response[v1.UpdateQueryExecutionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nexus.controlplane.v1.ControlPlaneService.UpdateQueryExecution is not implemented"))
}

func (UnimplementedControlPlaneServiceHandler) PollQueryExecution(context.Context, *connect.Request[v1.PollQueryExecutionRequest]) (*connect.Response[v1.PollQueryExecutionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nexus.controlplane.v1.ControlPlaneService.PollQueryExecution is not implemented"))
}

func (UnimplementedControlPlaneServiceHandler) Heartbeat(context.Context, *connect.Request[v1.HeartbeatRequest]) (*connect.Response[v1.HeartbeatResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nexus.controlplane.v1.ControlPlaneService.Heartbeat is not implemented"))
}
