// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: scour.v1.proto

package scourv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Visualise_VisOp int32

const (
	Visualise_UNSPECIFIED    Visualise_VisOp = 0
	Visualise_COUNT          Visualise_VisOp = 1
	Visualise_COUNT_DISTINCT Visualise_VisOp = 2
	Visualise_SUM            Visualise_VisOp = 3
	Visualise_AVG            Visualise_VisOp = 4
	Visualise_MAX            Visualise_VisOp = 5
	Visualise_MIN            Visualise_VisOp = 6
	// Unsupported
	Visualise_P001     Visualise_VisOp = 7
	Visualise_P01      Visualise_VisOp = 8
	Visualise_P05      Visualise_VisOp = 9
	Visualise_P10      Visualise_VisOp = 10
	Visualise_P25      Visualise_VisOp = 11
	Visualise_P50      Visualise_VisOp = 12
	Visualise_P75      Visualise_VisOp = 13
	Visualise_P90      Visualise_VisOp = 14
	Visualise_P95      Visualise_VisOp = 15
	Visualise_P99      Visualise_VisOp = 16
	Visualise_P999     Visualise_VisOp = 17
	Visualise_RATE_AVG Visualise_VisOp = 18
	Visualise_RATE_SUM Visualise_VisOp = 19
	Visualise_RATE_MAX Visualise_VisOp = 20
)

// Enum value maps for Visualise_VisOp.
var (
	Visualise_VisOp_name = map[int32]string{
		0:  "UNSPECIFIED",
		1:  "COUNT",
		2:  "COUNT_DISTINCT",
		3:  "SUM",
		4:  "AVG",
		5:  "MAX",
		6:  "MIN",
		7:  "P001",
		8:  "P01",
		9:  "P05",
		10: "P10",
		11: "P25",
		12: "P50",
		13: "P75",
		14: "P90",
		15: "P95",
		16: "P99",
		17: "P999",
		18: "RATE_AVG",
		19: "RATE_SUM",
		20: "RATE_MAX",
	}
	Visualise_VisOp_value = map[string]int32{
		"UNSPECIFIED":    0,
		"COUNT":          1,
		"COUNT_DISTINCT": 2,
		"SUM":            3,
		"AVG":            4,
		"MAX":            5,
		"MIN":            6,
		"P001":           7,
		"P01":            8,
		"P05":            9,
		"P10":            10,
		"P25":            11,
		"P50":            12,
		"P75":            13,
		"P90":            14,
		"P95":            15,
		"P99":            16,
		"P999":           17,
		"RATE_AVG":       18,
		"RATE_SUM":       19,
		"RATE_MAX":       20,
	}
)

func (x Visualise_VisOp) Enum() *Visualise_VisOp {
	p := new(Visualise_VisOp)
	*p = x
	return p
}

func (x Visualise_VisOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Visualise_VisOp) Descriptor() protoreflect.EnumDescriptor {
	return file_scour_v1_proto_enumTypes[0].Descriptor()
}

func (Visualise_VisOp) Type() protoreflect.EnumType {
	return &file_scour_v1_proto_enumTypes[0]
}

func (x Visualise_VisOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Visualise_VisOp.Descriptor instead.
func (Visualise_VisOp) EnumDescriptor() ([]byte, []int) {
	return file_scour_v1_proto_rawDescGZIP(), []int{3, 0}
}

type Where_WhereOp int32

const (
	Where_UNSPECIFIED Where_WhereOp = 0
	Where_AND         Where_WhereOp = 1
	Where_OR          Where_WhereOp = 2
)

// Enum value maps for Where_WhereOp.
var (
	Where_WhereOp_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "AND",
		2: "OR",
	}
	Where_WhereOp_value = map[string]int32{
		"UNSPECIFIED": 0,
		"AND":         1,
		"OR":          2,
	}
)

func (x Where_WhereOp) Enum() *Where_WhereOp {
	p := new(Where_WhereOp)
	*p = x
	return p
}

func (x Where_WhereOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Where_WhereOp) Descriptor() protoreflect.EnumDescriptor {
	return file_scour_v1_proto_enumTypes[1].Descriptor()
}

func (Where_WhereOp) Type() protoreflect.EnumType {
	return &file_scour_v1_proto_enumTypes[1]
}

func (x Where_WhereOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Where_WhereOp.Descriptor instead.
func (Where_WhereOp) EnumDescriptor() ([]byte, []int) {
	return file_scour_v1_proto_rawDescGZIP(), []int{4, 0}
}

type Clause_CompareOp int32

const (
	Clause_UNSPECIFIED           Clause_CompareOp = 0
	Clause_EQUAL                 Clause_CompareOp = 1
	Clause_NOT_EQUAL             Clause_CompareOp = 2
	Clause_GREATER_THAN          Clause_CompareOp = 3
	Clause_GREATER_THAN_OR_EQUAL Clause_CompareOp = 4
	Clause_LESS_THAN             Clause_CompareOp = 5
	Clause_LESS_THAN_OR_EQUAL    Clause_CompareOp = 6
	Clause_CONTAINS              Clause_CompareOp = 7
	Clause_DOES_NOT_CONTAIN      Clause_CompareOp = 8
	Clause_IN                    Clause_CompareOp = 9
	Clause_NOT_IN                Clause_CompareOp = 10
)

// Enum value maps for Clause_CompareOp.
var (
	Clause_CompareOp_name = map[int32]string{
		0:  "UNSPECIFIED",
		1:  "EQUAL",
		2:  "NOT_EQUAL",
		3:  "GREATER_THAN",
		4:  "GREATER_THAN_OR_EQUAL",
		5:  "LESS_THAN",
		6:  "LESS_THAN_OR_EQUAL",
		7:  "CONTAINS",
		8:  "DOES_NOT_CONTAIN",
		9:  "IN",
		10: "NOT_IN",
	}
	Clause_CompareOp_value = map[string]int32{
		"UNSPECIFIED":           0,
		"EQUAL":                 1,
		"NOT_EQUAL":             2,
		"GREATER_THAN":          3,
		"GREATER_THAN_OR_EQUAL": 4,
		"LESS_THAN":             5,
		"LESS_THAN_OR_EQUAL":    6,
		"CONTAINS":              7,
		"DOES_NOT_CONTAIN":      8,
		"IN":                    9,
		"NOT_IN":                10,
	}
)

func (x Clause_CompareOp) Enum() *Clause_CompareOp {
	p := new(Clause_CompareOp)
	*p = x
	return p
}

func (x Clause_CompareOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Clause_CompareOp) Descriptor() protoreflect.EnumDescriptor {
	return file_scour_v1_proto_enumTypes[2].Descriptor()
}

func (Clause_CompareOp) Type() protoreflect.EnumType {
	return &file_scour_v1_proto_enumTypes[2]
}

func (x Clause_CompareOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Clause_CompareOp.Descriptor instead.
func (Clause_CompareOp) EnumDescriptor() ([]byte, []int) {
	return file_scour_v1_proto_rawDescGZIP(), []int{5, 0}
}

type OrderBy_Order int32

const (
	OrderBy_UNSPECIFIED OrderBy_Order = 0
	OrderBy_ASC         OrderBy_Order = 1
	OrderBy_DESC        OrderBy_Order = 2
)

// Enum value maps for OrderBy_Order.
var (
	OrderBy_Order_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "ASC",
		2: "DESC",
	}
	OrderBy_Order_value = map[string]int32{
		"UNSPECIFIED": 0,
		"ASC":         1,
		"DESC":        2,
	}
)

func (x OrderBy_Order) Enum() *OrderBy_Order {
	p := new(OrderBy_Order)
	*p = x
	return p
}

func (x OrderBy_Order) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderBy_Order) Descriptor() protoreflect.EnumDescriptor {
	return file_scour_v1_proto_enumTypes[3].Descriptor()
}

func (OrderBy_Order) Type() protoreflect.EnumType {
	return &file_scour_v1_proto_enumTypes[3]
}

func (x OrderBy_Order) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderBy_Order.Descriptor instead.
func (OrderBy_Order) EnumDescriptor() ([]byte, []int) {
	return file_scour_v1_proto_rawDescGZIP(), []int{6, 0}
}

type CreateQueryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         *Query                 `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateQueryRequest) Reset() {
	*x = CreateQueryRequest{}
	mi := &file_scour_v1_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQueryRequest) ProtoMessage() {}

func (x *CreateQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scour_v1_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQueryRequest.ProtoReflect.Descriptor instead.
func (*CreateQueryRequest) Descriptor() ([]byte, []int) {
	return file_scour_v1_proto_rawDescGZIP(), []int{0}
}

func (x *CreateQueryRequest) GetQuery() *Query {
	if x != nil {
		return x.Query
	}
	return nil
}

type CreateQueryResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The time series data. If many fields are queried at once e.g select bytes, src_ip
	// each field will have its own series
	Series *Series `protobuf:"bytes,2,opt,name=series,proto3" json:"series,omitempty"`
	// This the "raw" data i.e the rows returned by the query. Used to show the raw data
	// in the UI
	Result        *Result `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateQueryResponse) Reset() {
	*x = CreateQueryResponse{}
	mi := &file_scour_v1_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQueryResponse) ProtoMessage() {}

func (x *CreateQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scour_v1_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQueryResponse.ProtoReflect.Descriptor instead.
func (*CreateQueryResponse) Descriptor() ([]byte, []int) {
	return file_scour_v1_proto_rawDescGZIP(), []int{1}
}

func (x *CreateQueryResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateQueryResponse) GetSeries() *Series {
	if x != nil {
		return x.Series
	}
	return nil
}

func (x *CreateQueryResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type Query struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	OrganisationId string                 `protobuf:"bytes,1,opt,name=organisation_id,json=organisationId,proto3" json:"organisation_id,omitempty"`
	Environment    string                 `protobuf:"bytes,2,opt,name=environment,proto3" json:"environment,omitempty"`
	Dataset        string                 `protobuf:"bytes,3,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Visualise      *Visualise             `protobuf:"bytes,4,opt,name=visualise,proto3" json:"visualise,omitempty"`
	Where          *Where                 `protobuf:"bytes,5,opt,name=where,proto3" json:"where,omitempty"`
	GroupBy        []string               `protobuf:"bytes,6,rep,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	OrderBy        []*OrderBy             `protobuf:"bytes,7,rep,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	Limit          uint32                 `protobuf:"varint,8,opt,name=limit,proto3" json:"limit,omitempty"`
	Having         *Clause                `protobuf:"bytes,9,opt,name=having,proto3" json:"having,omitempty"`
	StartTime      int64                  `protobuf:"varint,10,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime        int64                  `protobuf:"varint,11,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Query) Reset() {
	*x = Query{}
	mi := &file_scour_v1_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_scour_v1_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_scour_v1_proto_rawDescGZIP(), []int{2}
}

func (x *Query) GetOrganisationId() string {
	if x != nil {
		return x.OrganisationId
	}
	return ""
}

func (x *Query) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *Query) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *Query) GetVisualise() *Visualise {
	if x != nil {
		return x.Visualise
	}
	return nil
}

func (x *Query) GetWhere() *Where {
	if x != nil {
		return x.Where
	}
	return nil
}

func (x *Query) GetGroupBy() []string {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *Query) GetOrderBy() []*OrderBy {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *Query) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *Query) GetHaving() *Clause {
	if x != nil {
		return x.Having
	}
	return nil
}

func (x *Query) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Query) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type Visualise struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Op            Visualise_VisOp        `protobuf:"varint,1,opt,name=op,proto3,enum=scour.v1.Visualise_VisOp" json:"op,omitempty"`
	Field         string                 `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Visualise) Reset() {
	*x = Visualise{}
	mi := &file_scour_v1_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Visualise) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Visualise) ProtoMessage() {}

func (x *Visualise) ProtoReflect() protoreflect.Message {
	mi := &file_scour_v1_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Visualise.ProtoReflect.Descriptor instead.
func (*Visualise) Descriptor() ([]byte, []int) {
	return file_scour_v1_proto_rawDescGZIP(), []int{3}
}

func (x *Visualise) GetOp() Visualise_VisOp {
	if x != nil {
		return x.Op
	}
	return Visualise_UNSPECIFIED
}

func (x *Visualise) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

type Where struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Op            Where_WhereOp          `protobuf:"varint,1,opt,name=op,proto3,enum=scour.v1.Where_WhereOp" json:"op,omitempty"`
	Clauses       []*Clause              `protobuf:"bytes,2,rep,name=clauses,proto3" json:"clauses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Where) Reset() {
	*x = Where{}
	mi := &file_scour_v1_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Where) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Where) ProtoMessage() {}

func (x *Where) ProtoReflect() protoreflect.Message {
	mi := &file_scour_v1_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Where.ProtoReflect.Descriptor instead.
func (*Where) Descriptor() ([]byte, []int) {
	return file_scour_v1_proto_rawDescGZIP(), []int{4}
}

func (x *Where) GetOp() Where_WhereOp {
	if x != nil {
		return x.Op
	}
	return Where_UNSPECIFIED
}

func (x *Where) GetClauses() []*Clause {
	if x != nil {
		return x.Clauses
	}
	return nil
}

type Clause struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Field         string                 `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Op            Clause_CompareOp       `protobuf:"varint,3,opt,name=op,proto3,enum=scour.v1.Clause_CompareOp" json:"op,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Clause) Reset() {
	*x = Clause{}
	mi := &file_scour_v1_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Clause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Clause) ProtoMessage() {}

func (x *Clause) ProtoReflect() protoreflect.Message {
	mi := &file_scour_v1_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Clause.ProtoReflect.Descriptor instead.
func (*Clause) Descriptor() ([]byte, []int) {
	return file_scour_v1_proto_rawDescGZIP(), []int{5}
}

func (x *Clause) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *Clause) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Clause) GetOp() Clause_CompareOp {
	if x != nil {
		return x.Op
	}
	return Clause_UNSPECIFIED
}

type OrderBy struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Field         string                 `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Order         OrderBy_Order          `protobuf:"varint,2,opt,name=order,proto3,enum=scour.v1.OrderBy_Order" json:"order,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderBy) Reset() {
	*x = OrderBy{}
	mi := &file_scour_v1_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBy) ProtoMessage() {}

func (x *OrderBy) ProtoReflect() protoreflect.Message {
	mi := &file_scour_v1_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBy.ProtoReflect.Descriptor instead.
func (*OrderBy) Descriptor() ([]byte, []int) {
	return file_scour_v1_proto_rawDescGZIP(), []int{6}
}

func (x *OrderBy) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *OrderBy) GetOrder() OrderBy_Order {
	if x != nil {
		return x.Order
	}
	return OrderBy_UNSPECIFIED
}

type Series struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Timestamps    []*timestamppb.Timestamp `protobuf:"bytes,1,rep,name=timestamps,proto3" json:"timestamps,omitempty"`
	Data          []*SeriesData            `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Series) Reset() {
	*x = Series{}
	mi := &file_scour_v1_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Series) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Series) ProtoMessage() {}

func (x *Series) ProtoReflect() protoreflect.Message {
	mi := &file_scour_v1_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Series.ProtoReflect.Descriptor instead.
func (*Series) Descriptor() ([]byte, []int) {
	return file_scour_v1_proto_rawDescGZIP(), []int{7}
}

func (x *Series) GetTimestamps() []*timestamppb.Timestamp {
	if x != nil {
		return x.Timestamps
	}
	return nil
}

func (x *Series) GetData() []*SeriesData {
	if x != nil {
		return x.Data
	}
	return nil
}

type SeriesData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the series. This is the field that was queried
	Name          string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Values        []int64 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SeriesData) Reset() {
	*x = SeriesData{}
	mi := &file_scour_v1_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SeriesData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeriesData) ProtoMessage() {}

func (x *SeriesData) ProtoReflect() protoreflect.Message {
	mi := &file_scour_v1_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeriesData.ProtoReflect.Descriptor instead.
func (*SeriesData) Descriptor() ([]byte, []int) {
	return file_scour_v1_proto_rawDescGZIP(), []int{8}
}

func (x *SeriesData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SeriesData) GetValues() []int64 {
	if x != nil {
		return x.Values
	}
	return nil
}

type Result struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Fields        []string               `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	Rows          []*Row                 `protobuf:"bytes,2,rep,name=rows,proto3" json:"rows,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Result) Reset() {
	*x = Result{}
	mi := &file_scour_v1_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_scour_v1_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_scour_v1_proto_rawDescGZIP(), []int{9}
}

func (x *Result) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Result) GetRows() []*Row {
	if x != nil {
		return x.Rows
	}
	return nil
}

type Row struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []*Value               `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Row) Reset() {
	*x = Row{}
	mi := &file_scour_v1_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Row) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Row) ProtoMessage() {}

func (x *Row) ProtoReflect() protoreflect.Message {
	mi := &file_scour_v1_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Row.ProtoReflect.Descriptor instead.
func (*Row) Descriptor() ([]byte, []int) {
	return file_scour_v1_proto_rawDescGZIP(), []int{10}
}

func (x *Row) GetValues() []*Value {
	if x != nil {
		return x.Values
	}
	return nil
}

type Value struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Kind:
	//
	//	*Value_Int32Value
	//	*Value_Int64Value
	//	*Value_Uint32Value
	//	*Value_Uint64Value
	//	*Value_BoolValue
	//	*Value_StringValue
	//	*Value_BytesValue
	//	*Value_TimestampValue
	Kind          isValue_Kind `protobuf_oneof:"kind"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Value) Reset() {
	*x = Value{}
	mi := &file_scour_v1_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_scour_v1_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_scour_v1_proto_rawDescGZIP(), []int{11}
}

func (x *Value) GetKind() isValue_Kind {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *Value) GetInt32Value() int32 {
	if x != nil {
		if x, ok := x.Kind.(*Value_Int32Value); ok {
			return x.Int32Value
		}
	}
	return 0
}

func (x *Value) GetInt64Value() int64 {
	if x != nil {
		if x, ok := x.Kind.(*Value_Int64Value); ok {
			return x.Int64Value
		}
	}
	return 0
}

func (x *Value) GetUint32Value() uint32 {
	if x != nil {
		if x, ok := x.Kind.(*Value_Uint32Value); ok {
			return x.Uint32Value
		}
	}
	return 0
}

func (x *Value) GetUint64Value() uint64 {
	if x != nil {
		if x, ok := x.Kind.(*Value_Uint64Value); ok {
			return x.Uint64Value
		}
	}
	return 0
}

func (x *Value) GetBoolValue() bool {
	if x != nil {
		if x, ok := x.Kind.(*Value_BoolValue); ok {
			return x.BoolValue
		}
	}
	return false
}

func (x *Value) GetStringValue() string {
	if x != nil {
		if x, ok := x.Kind.(*Value_StringValue); ok {
			return x.StringValue
		}
	}
	return ""
}

func (x *Value) GetBytesValue() []byte {
	if x != nil {
		if x, ok := x.Kind.(*Value_BytesValue); ok {
			return x.BytesValue
		}
	}
	return nil
}

func (x *Value) GetTimestampValue() *timestamppb.Timestamp {
	if x != nil {
		if x, ok := x.Kind.(*Value_TimestampValue); ok {
			return x.TimestampValue
		}
	}
	return nil
}

type isValue_Kind interface {
	isValue_Kind()
}

type Value_Int32Value struct {
	Int32Value int32 `protobuf:"varint,1,opt,name=int32_value,json=int32Value,proto3,oneof"`
}

type Value_Int64Value struct {
	Int64Value int64 `protobuf:"varint,2,opt,name=int64_value,json=int64Value,proto3,oneof"`
}

type Value_Uint32Value struct {
	Uint32Value uint32 `protobuf:"varint,3,opt,name=uint32_value,json=uint32Value,proto3,oneof"`
}

type Value_Uint64Value struct {
	Uint64Value uint64 `protobuf:"varint,4,opt,name=uint64_value,json=uint64Value,proto3,oneof"`
}

type Value_BoolValue struct {
	BoolValue bool `protobuf:"varint,5,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type Value_StringValue struct {
	StringValue string `protobuf:"bytes,6,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type Value_BytesValue struct {
	BytesValue []byte `protobuf:"bytes,7,opt,name=bytes_value,json=bytesValue,proto3,oneof"`
}

type Value_TimestampValue struct {
	TimestampValue *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=timestamp_value,json=timestampValue,proto3,oneof"`
}

func (*Value_Int32Value) isValue_Kind() {}

func (*Value_Int64Value) isValue_Kind() {}

func (*Value_Uint32Value) isValue_Kind() {}

func (*Value_Uint64Value) isValue_Kind() {}

func (*Value_BoolValue) isValue_Kind() {}

func (*Value_StringValue) isValue_Kind() {}

func (*Value_BytesValue) isValue_Kind() {}

func (*Value_TimestampValue) isValue_Kind() {}

var File_scour_v1_proto protoreflect.FileDescriptor

var file_scour_v1_proto_rawDesc = string([]byte{
	0x0a, 0x0e, 0x73, 0x63, 0x6f, 0x75, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x73, 0x63, 0x6f, 0x75, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3b, 0x0a, 0x12, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x25, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x73, 0x63, 0x6f, 0x75, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x79, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x28, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x73, 0x63, 0x6f, 0x75, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x63, 0x6f, 0x75,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x89, 0x03, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x27, 0x0a,
	0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x6f, 0x75, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x52, 0x09, 0x76, 0x69, 0x73, 0x75,
	0x61, 0x6c, 0x69, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x63, 0x6f, 0x75, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x68, 0x65, 0x72, 0x65, 0x52, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x2c, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x63, 0x6f, 0x75,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x68,
	0x61, 0x76, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x63,
	0x6f, 0x75, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x06, 0x68,
	0x61, 0x76, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xb9, 0x02, 0x0a, 0x09, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x12, 0x29, 0x0a,
	0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x73, 0x63, 0x6f, 0x75,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x2e, 0x56,
	0x69, 0x73, 0x4f, 0x70, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x22, 0xea,
	0x01, 0x0a, 0x05, 0x56, 0x69, 0x73, 0x4f, 0x70, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x44, 0x49,
	0x53, 0x54, 0x49, 0x4e, 0x43, 0x54, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x55, 0x4d, 0x10,
	0x03, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x56, 0x47, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41,
	0x58, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x49, 0x4e, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04,
	0x50, 0x30, 0x30, 0x31, 0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x30, 0x31, 0x10, 0x08, 0x12,
	0x07, 0x0a, 0x03, 0x50, 0x30, 0x35, 0x10, 0x09, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x31, 0x30, 0x10,
	0x0a, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x32, 0x35, 0x10, 0x0b, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x35,
	0x30, 0x10, 0x0c, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x37, 0x35, 0x10, 0x0d, 0x12, 0x07, 0x0a, 0x03,
	0x50, 0x39, 0x30, 0x10, 0x0e, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x39, 0x35, 0x10, 0x0f, 0x12, 0x07,
	0x0a, 0x03, 0x50, 0x39, 0x39, 0x10, 0x10, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x39, 0x39, 0x39, 0x10,
	0x11, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x56, 0x47, 0x10, 0x12, 0x12,
	0x0c, 0x0a, 0x08, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x55, 0x4d, 0x10, 0x13, 0x12, 0x0c, 0x0a,
	0x08, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x14, 0x22, 0x89, 0x01, 0x0a, 0x05,
	0x57, 0x68, 0x65, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x73, 0x63, 0x6f, 0x75, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x68, 0x65,
	0x72, 0x65, 0x2e, 0x57, 0x68, 0x65, 0x72, 0x65, 0x4f, 0x70, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x2a,
	0x0a, 0x07, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x73, 0x63, 0x6f, 0x75, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x75, 0x73,
	0x65, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x73, 0x22, 0x2b, 0x0a, 0x07, 0x57, 0x68,
	0x65, 0x72, 0x65, 0x4f, 0x70, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x44, 0x10, 0x01, 0x12,
	0x06, 0x0a, 0x02, 0x4f, 0x52, 0x10, 0x02, 0x22, 0xa5, 0x02, 0x0a, 0x06, 0x43, 0x6c, 0x61, 0x75,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a,
	0x0a, 0x02, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x63, 0x6f,
	0x75, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x65, 0x4f, 0x70, 0x52, 0x02, 0x6f, 0x70, 0x22, 0xc2, 0x01, 0x0a, 0x09, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x4f, 0x70, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x51, 0x55,
	0x41, 0x4c, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x51, 0x55, 0x41,
	0x4c, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54,
	0x48, 0x41, 0x4e, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52,
	0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x04,
	0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x05, 0x12,
	0x16, 0x0a, 0x12, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x4f, 0x52, 0x5f,
	0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x54, 0x41,
	0x49, 0x4e, 0x53, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x10, 0x08, 0x12, 0x06, 0x0a, 0x02, 0x49,
	0x4e, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x10, 0x0a, 0x22,
	0x7b, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x2d, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x73, 0x63, 0x6f, 0x75, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22,
	0x2b, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53, 0x43,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43, 0x10, 0x02, 0x22, 0x6e, 0x0a, 0x06,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x73, 0x63, 0x6f, 0x75, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x38, 0x0a, 0x0a,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x43, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x63, 0x6f, 0x75, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x6f, 0x77, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0x2e, 0x0a, 0x03, 0x52,
	0x6f, 0x77, 0x12, 0x27, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x63, 0x6f, 0x75, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xcf, 0x02, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52,
	0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x23, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x45,
	0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x32, 0x5c, 0x0a,
	0x0c, 0x53, 0x63, 0x6f, 0x75, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4c, 0x0a,
	0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1c, 0x2e, 0x73,
	0x63, 0x6f, 0x75, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x63, 0x6f,
	0x75, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x32, 0x5a, 0x30, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x73, 0x70, 0x69, 0x6c, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x73,
	0x63, 0x6f, 0x75, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x63, 0x6f, 0x75, 0x72, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_scour_v1_proto_rawDescOnce sync.Once
	file_scour_v1_proto_rawDescData []byte
)

func file_scour_v1_proto_rawDescGZIP() []byte {
	file_scour_v1_proto_rawDescOnce.Do(func() {
		file_scour_v1_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_scour_v1_proto_rawDesc), len(file_scour_v1_proto_rawDesc)))
	})
	return file_scour_v1_proto_rawDescData
}

var file_scour_v1_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_scour_v1_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_scour_v1_proto_goTypes = []any{
	(Visualise_VisOp)(0),          // 0: scour.v1.Visualise.VisOp
	(Where_WhereOp)(0),            // 1: scour.v1.Where.WhereOp
	(Clause_CompareOp)(0),         // 2: scour.v1.Clause.CompareOp
	(OrderBy_Order)(0),            // 3: scour.v1.OrderBy.Order
	(*CreateQueryRequest)(nil),    // 4: scour.v1.CreateQueryRequest
	(*CreateQueryResponse)(nil),   // 5: scour.v1.CreateQueryResponse
	(*Query)(nil),                 // 6: scour.v1.Query
	(*Visualise)(nil),             // 7: scour.v1.Visualise
	(*Where)(nil),                 // 8: scour.v1.Where
	(*Clause)(nil),                // 9: scour.v1.Clause
	(*OrderBy)(nil),               // 10: scour.v1.OrderBy
	(*Series)(nil),                // 11: scour.v1.Series
	(*SeriesData)(nil),            // 12: scour.v1.SeriesData
	(*Result)(nil),                // 13: scour.v1.Result
	(*Row)(nil),                   // 14: scour.v1.Row
	(*Value)(nil),                 // 15: scour.v1.Value
	(*timestamppb.Timestamp)(nil), // 16: google.protobuf.Timestamp
}
var file_scour_v1_proto_depIdxs = []int32{
	6,  // 0: scour.v1.CreateQueryRequest.query:type_name -> scour.v1.Query
	11, // 1: scour.v1.CreateQueryResponse.series:type_name -> scour.v1.Series
	13, // 2: scour.v1.CreateQueryResponse.result:type_name -> scour.v1.Result
	7,  // 3: scour.v1.Query.visualise:type_name -> scour.v1.Visualise
	8,  // 4: scour.v1.Query.where:type_name -> scour.v1.Where
	10, // 5: scour.v1.Query.order_by:type_name -> scour.v1.OrderBy
	9,  // 6: scour.v1.Query.having:type_name -> scour.v1.Clause
	0,  // 7: scour.v1.Visualise.op:type_name -> scour.v1.Visualise.VisOp
	1,  // 8: scour.v1.Where.op:type_name -> scour.v1.Where.WhereOp
	9,  // 9: scour.v1.Where.clauses:type_name -> scour.v1.Clause
	2,  // 10: scour.v1.Clause.op:type_name -> scour.v1.Clause.CompareOp
	3,  // 11: scour.v1.OrderBy.order:type_name -> scour.v1.OrderBy.Order
	16, // 12: scour.v1.Series.timestamps:type_name -> google.protobuf.Timestamp
	12, // 13: scour.v1.Series.data:type_name -> scour.v1.SeriesData
	14, // 14: scour.v1.Result.rows:type_name -> scour.v1.Row
	15, // 15: scour.v1.Row.values:type_name -> scour.v1.Value
	16, // 16: scour.v1.Value.timestamp_value:type_name -> google.protobuf.Timestamp
	4,  // 17: scour.v1.ScourService.CreateQuery:input_type -> scour.v1.CreateQueryRequest
	5,  // 18: scour.v1.ScourService.CreateQuery:output_type -> scour.v1.CreateQueryResponse
	18, // [18:19] is the sub-list for method output_type
	17, // [17:18] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_scour_v1_proto_init() }
func file_scour_v1_proto_init() {
	if File_scour_v1_proto != nil {
		return
	}
	file_scour_v1_proto_msgTypes[11].OneofWrappers = []any{
		(*Value_Int32Value)(nil),
		(*Value_Int64Value)(nil),
		(*Value_Uint32Value)(nil),
		(*Value_Uint64Value)(nil),
		(*Value_BoolValue)(nil),
		(*Value_StringValue)(nil),
		(*Value_BytesValue)(nil),
		(*Value_TimestampValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_scour_v1_proto_rawDesc), len(file_scour_v1_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_scour_v1_proto_goTypes,
		DependencyIndexes: file_scour_v1_proto_depIdxs,
		EnumInfos:         file_scour_v1_proto_enumTypes,
		MessageInfos:      file_scour_v1_proto_msgTypes,
	}.Build()
	File_scour_v1_proto = out.File
	file_scour_v1_proto_goTypes = nil
	file_scour_v1_proto_depIdxs = nil
}
