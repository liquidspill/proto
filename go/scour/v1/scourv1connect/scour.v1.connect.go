// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: scour.v1.proto

package scourv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/liquidspill/proto/go/scour/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ScourServiceName is the fully-qualified name of the ScourService service.
	ScourServiceName = "scour.v1.ScourService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ScourServiceCreateQueryProcedure is the fully-qualified name of the ScourService's CreateQuery
	// RPC.
	ScourServiceCreateQueryProcedure = "/scour.v1.ScourService/CreateQuery"
)

// ScourServiceClient is a client for the scour.v1.ScourService service.
type ScourServiceClient interface {
	// TODO: Convert to streaming
	CreateQuery(context.Context, *connect.Request[v1.CreateQueryRequest]) (*connect.Response[v1.CreateQueryResponse], error)
}

// NewScourServiceClient constructs a client for the scour.v1.ScourService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewScourServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ScourServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	scourServiceMethods := v1.File_scour_v1_proto.Services().ByName("ScourService").Methods()
	return &scourServiceClient{
		createQuery: connect.NewClient[v1.CreateQueryRequest, v1.CreateQueryResponse](
			httpClient,
			baseURL+ScourServiceCreateQueryProcedure,
			connect.WithSchema(scourServiceMethods.ByName("CreateQuery")),
			connect.WithClientOptions(opts...),
		),
	}
}

// scourServiceClient implements ScourServiceClient.
type scourServiceClient struct {
	createQuery *connect.Client[v1.CreateQueryRequest, v1.CreateQueryResponse]
}

// CreateQuery calls scour.v1.ScourService.CreateQuery.
func (c *scourServiceClient) CreateQuery(ctx context.Context, req *connect.Request[v1.CreateQueryRequest]) (*connect.Response[v1.CreateQueryResponse], error) {
	return c.createQuery.CallUnary(ctx, req)
}

// ScourServiceHandler is an implementation of the scour.v1.ScourService service.
type ScourServiceHandler interface {
	// TODO: Convert to streaming
	CreateQuery(context.Context, *connect.Request[v1.CreateQueryRequest]) (*connect.Response[v1.CreateQueryResponse], error)
}

// NewScourServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewScourServiceHandler(svc ScourServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	scourServiceMethods := v1.File_scour_v1_proto.Services().ByName("ScourService").Methods()
	scourServiceCreateQueryHandler := connect.NewUnaryHandler(
		ScourServiceCreateQueryProcedure,
		svc.CreateQuery,
		connect.WithSchema(scourServiceMethods.ByName("CreateQuery")),
		connect.WithHandlerOptions(opts...),
	)
	return "/scour.v1.ScourService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ScourServiceCreateQueryProcedure:
			scourServiceCreateQueryHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedScourServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedScourServiceHandler struct{}

func (UnimplementedScourServiceHandler) CreateQuery(context.Context, *connect.Request[v1.CreateQueryRequest]) (*connect.Response[v1.CreateQueryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scour.v1.ScourService.CreateQuery is not implemented"))
}
