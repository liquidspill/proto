// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: fluid/controlplane/v1/controlplane.proto

package controlplanev1

import (
	v1 "github.com/liquidspill/proto/go/std/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IPVersion int32

const (
	IPVersion_IPVERSION_UNSPECIFIED IPVersion = 0
	IPVersion_IPVERSION_IPV4        IPVersion = 1
	IPVersion_IPVERSION_IPV6        IPVersion = 2
)

// Enum value maps for IPVersion.
var (
	IPVersion_name = map[int32]string{
		0: "IPVERSION_UNSPECIFIED",
		1: "IPVERSION_IPV4",
		2: "IPVERSION_IPV6",
	}
	IPVersion_value = map[string]int32{
		"IPVERSION_UNSPECIFIED": 0,
		"IPVERSION_IPV4":        1,
		"IPVERSION_IPV6":        2,
	}
)

func (x IPVersion) Enum() *IPVersion {
	p := new(IPVersion)
	*p = x
	return p
}

func (x IPVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IPVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_fluid_controlplane_v1_controlplane_proto_enumTypes[0].Descriptor()
}

func (IPVersion) Type() protoreflect.EnumType {
	return &file_fluid_controlplane_v1_controlplane_proto_enumTypes[0]
}

func (x IPVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IPVersion.Descriptor instead.
func (IPVersion) EnumDescriptor() ([]byte, []int) {
	return file_fluid_controlplane_v1_controlplane_proto_rawDescGZIP(), []int{0}
}

type ControlMessageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       *ControlMessage        `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ControlMessageRequest) Reset() {
	*x = ControlMessageRequest{}
	mi := &file_fluid_controlplane_v1_controlplane_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ControlMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlMessageRequest) ProtoMessage() {}

func (x *ControlMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fluid_controlplane_v1_controlplane_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlMessageRequest.ProtoReflect.Descriptor instead.
func (*ControlMessageRequest) Descriptor() ([]byte, []int) {
	return file_fluid_controlplane_v1_controlplane_proto_rawDescGZIP(), []int{0}
}

func (x *ControlMessageRequest) GetMessage() *ControlMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type ControlMessageResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       *ControlMessage        `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ControlMessageResponse) Reset() {
	*x = ControlMessageResponse{}
	mi := &file_fluid_controlplane_v1_controlplane_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ControlMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlMessageResponse) ProtoMessage() {}

func (x *ControlMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fluid_controlplane_v1_controlplane_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlMessageResponse.ProtoReflect.Descriptor instead.
func (*ControlMessageResponse) Descriptor() ([]byte, []int) {
	return file_fluid_controlplane_v1_controlplane_proto_rawDescGZIP(), []int{1}
}

func (x *ControlMessageResponse) GetMessage() *ControlMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

// Control messages sent by the server. For each of them, since
// we don't expect them to be changed often, we just send the
// entire configuration on each change (for the given message)
type ControlMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Message:
	//
	//	*ControlMessage_Telemetry
	//	*ControlMessage_Devices
	Message       isControlMessage_Message `protobuf_oneof:"message"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ControlMessage) Reset() {
	*x = ControlMessage{}
	mi := &file_fluid_controlplane_v1_controlplane_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ControlMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlMessage) ProtoMessage() {}

func (x *ControlMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fluid_controlplane_v1_controlplane_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlMessage.ProtoReflect.Descriptor instead.
func (*ControlMessage) Descriptor() ([]byte, []int) {
	return file_fluid_controlplane_v1_controlplane_proto_rawDescGZIP(), []int{2}
}

func (x *ControlMessage) GetMessage() isControlMessage_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ControlMessage) GetTelemetry() *Telemetry {
	if x != nil {
		if x, ok := x.Message.(*ControlMessage_Telemetry); ok {
			return x.Telemetry
		}
	}
	return nil
}

func (x *ControlMessage) GetDevices() *Devices {
	if x != nil {
		if x, ok := x.Message.(*ControlMessage_Devices); ok {
			return x.Devices
		}
	}
	return nil
}

type isControlMessage_Message interface {
	isControlMessage_Message()
}

type ControlMessage_Telemetry struct {
	Telemetry *Telemetry `protobuf:"bytes,1,opt,name=telemetry,proto3,oneof"`
}

type ControlMessage_Devices struct {
	Devices *Devices `protobuf:"bytes,2,opt,name=devices,proto3,oneof"`
}

func (*ControlMessage_Telemetry) isControlMessage_Message() {}

func (*ControlMessage_Devices) isControlMessage_Message() {}

// Telemtry control messages
type Telemetry struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether or not to export telemetry data. This can be
	// switched off to prevent data from being written to
	// the catalogue and to blob storage.
	Export        bool `protobuf:"varint,1,opt,name=export,proto3" json:"export,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Telemetry) Reset() {
	*x = Telemetry{}
	mi := &file_fluid_controlplane_v1_controlplane_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Telemetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Telemetry) ProtoMessage() {}

func (x *Telemetry) ProtoReflect() protoreflect.Message {
	mi := &file_fluid_controlplane_v1_controlplane_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Telemetry.ProtoReflect.Descriptor instead.
func (*Telemetry) Descriptor() ([]byte, []int) {
	return file_fluid_controlplane_v1_controlplane_proto_rawDescGZIP(), []int{3}
}

func (x *Telemetry) GetExport() bool {
	if x != nil {
		return x.Export
	}
	return false
}

// Device control messages
type Devices struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Device:
	//
	//	*Devices_Generic
	Device        isDevices_Device `protobuf_oneof:"device"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Devices) Reset() {
	*x = Devices{}
	mi := &file_fluid_controlplane_v1_controlplane_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Devices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devices) ProtoMessage() {}

func (x *Devices) ProtoReflect() protoreflect.Message {
	mi := &file_fluid_controlplane_v1_controlplane_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devices.ProtoReflect.Descriptor instead.
func (*Devices) Descriptor() ([]byte, []int) {
	return file_fluid_controlplane_v1_controlplane_proto_rawDescGZIP(), []int{4}
}

func (x *Devices) GetDevice() isDevices_Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *Devices) GetGeneric() *GenericDevice {
	if x != nil {
		if x, ok := x.Device.(*Devices_Generic); ok {
			return x.Generic
		}
	}
	return nil
}

type isDevices_Device interface {
	isDevices_Device()
}

type Devices_Generic struct {
	// Generic device that sends flow data. All devices are generic
	// devices, however in future we will support more specific dimensions
	// from supported models
	Generic *GenericDevice `protobuf:"bytes,1,opt,name=generic,proto3,oneof"`
}

func (*Devices_Generic) isDevices_Device() {}

type GenericDevice struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Devices       []*GenericDeviceDescriptor `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenericDevice) Reset() {
	*x = GenericDevice{}
	mi := &file_fluid_controlplane_v1_controlplane_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenericDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericDevice) ProtoMessage() {}

func (x *GenericDevice) ProtoReflect() protoreflect.Message {
	mi := &file_fluid_controlplane_v1_controlplane_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericDevice.ProtoReflect.Descriptor instead.
func (*GenericDevice) Descriptor() ([]byte, []int) {
	return file_fluid_controlplane_v1_controlplane_proto_rawDescGZIP(), []int{5}
}

func (x *GenericDevice) GetDevices() []*GenericDeviceDescriptor {
	if x != nil {
		return x.Devices
	}
	return nil
}

type GenericDeviceDescriptor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// User-defined name for the device
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the device
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Vendor      string `protobuf:"bytes,3,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Model       string `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
	// The IP addresses of the device. We use these to look
	// up the relevant device to enrich our flow with its information.
	Addresses []*IpAddress `protobuf:"bytes,5,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// User-defined labels for the device. Used to add more metadata
	// to query over.
	Labels        []*v1.KeyValue `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenericDeviceDescriptor) Reset() {
	*x = GenericDeviceDescriptor{}
	mi := &file_fluid_controlplane_v1_controlplane_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenericDeviceDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericDeviceDescriptor) ProtoMessage() {}

func (x *GenericDeviceDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_fluid_controlplane_v1_controlplane_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericDeviceDescriptor.ProtoReflect.Descriptor instead.
func (*GenericDeviceDescriptor) Descriptor() ([]byte, []int) {
	return file_fluid_controlplane_v1_controlplane_proto_rawDescGZIP(), []int{6}
}

func (x *GenericDeviceDescriptor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GenericDeviceDescriptor) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GenericDeviceDescriptor) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *GenericDeviceDescriptor) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *GenericDeviceDescriptor) GetAddresses() []*IpAddress {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *GenericDeviceDescriptor) GetLabels() []*v1.KeyValue {
	if x != nil {
		return x.Labels
	}
	return nil
}

type IpAddress struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       []byte                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Version       IPVersion              `protobuf:"varint,2,opt,name=version,proto3,enum=fluid.controlplane.v1.IPVersion" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IpAddress) Reset() {
	*x = IpAddress{}
	mi := &file_fluid_controlplane_v1_controlplane_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IpAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpAddress) ProtoMessage() {}

func (x *IpAddress) ProtoReflect() protoreflect.Message {
	mi := &file_fluid_controlplane_v1_controlplane_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpAddress.ProtoReflect.Descriptor instead.
func (*IpAddress) Descriptor() ([]byte, []int) {
	return file_fluid_controlplane_v1_controlplane_proto_rawDescGZIP(), []int{7}
}

func (x *IpAddress) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *IpAddress) GetVersion() IPVersion {
	if x != nil {
		return x.Version
	}
	return IPVersion_IPVERSION_UNSPECIFIED
}

var File_fluid_controlplane_v1_controlplane_proto protoreflect.FileDescriptor

const file_fluid_controlplane_v1_controlplane_proto_rawDesc = "" +
	"\n" +
	"(fluid/controlplane/v1/controlplane.proto\x12\x15fluid.controlplane.v1\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x10std/v1/std.proto\"X\n" +
	"\x15ControlMessageRequest\x12?\n" +
	"\amessage\x18\x01 \x01(\v2%.fluid.controlplane.v1.ControlMessageR\amessage\"Y\n" +
	"\x16ControlMessageResponse\x12?\n" +
	"\amessage\x18\x01 \x01(\v2%.fluid.controlplane.v1.ControlMessageR\amessage\"\x99\x01\n" +
	"\x0eControlMessage\x12@\n" +
	"\ttelemetry\x18\x01 \x01(\v2 .fluid.controlplane.v1.TelemetryH\x00R\ttelemetry\x12:\n" +
	"\adevices\x18\x02 \x01(\v2\x1e.fluid.controlplane.v1.DevicesH\x00R\adevicesB\t\n" +
	"\amessage\"#\n" +
	"\tTelemetry\x12\x16\n" +
	"\x06export\x18\x01 \x01(\bR\x06export\"U\n" +
	"\aDevices\x12@\n" +
	"\ageneric\x18\x01 \x01(\v2$.fluid.controlplane.v1.GenericDeviceH\x00R\agenericB\b\n" +
	"\x06device\"Y\n" +
	"\rGenericDevice\x12H\n" +
	"\adevices\x18\x01 \x03(\v2..fluid.controlplane.v1.GenericDeviceDescriptorR\adevices\"\xe7\x01\n" +
	"\x17GenericDeviceDescriptor\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12\x16\n" +
	"\x06vendor\x18\x03 \x01(\tR\x06vendor\x12\x14\n" +
	"\x05model\x18\x04 \x01(\tR\x05model\x12>\n" +
	"\taddresses\x18\x05 \x03(\v2 .fluid.controlplane.v1.IpAddressR\taddresses\x12(\n" +
	"\x06labels\x18\x06 \x03(\v2\x10.std.v1.KeyValueR\x06labels\"a\n" +
	"\tIpAddress\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\fR\aaddress\x12:\n" +
	"\aversion\x18\x02 \x01(\x0e2 .fluid.controlplane.v1.IPVersionR\aversion*N\n" +
	"\tIPVersion\x12\x19\n" +
	"\x15IPVERSION_UNSPECIFIED\x10\x00\x12\x12\n" +
	"\x0eIPVERSION_IPV4\x10\x01\x12\x12\n" +
	"\x0eIPVERSION_IPV6\x10\x022\x7f\n" +
	"\x13ControlPlaneService\x12h\n" +
	"\aControl\x12,.fluid.controlplane.v1.ControlMessageRequest\x1a-.fluid.controlplane.v1.ControlMessageResponse\"\x00BFZDgithub.com/liquidspill/proto/go/fluid/controlplane/v1;controlplanev1b\x06proto3"

var (
	file_fluid_controlplane_v1_controlplane_proto_rawDescOnce sync.Once
	file_fluid_controlplane_v1_controlplane_proto_rawDescData []byte
)

func file_fluid_controlplane_v1_controlplane_proto_rawDescGZIP() []byte {
	file_fluid_controlplane_v1_controlplane_proto_rawDescOnce.Do(func() {
		file_fluid_controlplane_v1_controlplane_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_fluid_controlplane_v1_controlplane_proto_rawDesc), len(file_fluid_controlplane_v1_controlplane_proto_rawDesc)))
	})
	return file_fluid_controlplane_v1_controlplane_proto_rawDescData
}

var file_fluid_controlplane_v1_controlplane_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_fluid_controlplane_v1_controlplane_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_fluid_controlplane_v1_controlplane_proto_goTypes = []any{
	(IPVersion)(0),                  // 0: fluid.controlplane.v1.IPVersion
	(*ControlMessageRequest)(nil),   // 1: fluid.controlplane.v1.ControlMessageRequest
	(*ControlMessageResponse)(nil),  // 2: fluid.controlplane.v1.ControlMessageResponse
	(*ControlMessage)(nil),          // 3: fluid.controlplane.v1.ControlMessage
	(*Telemetry)(nil),               // 4: fluid.controlplane.v1.Telemetry
	(*Devices)(nil),                 // 5: fluid.controlplane.v1.Devices
	(*GenericDevice)(nil),           // 6: fluid.controlplane.v1.GenericDevice
	(*GenericDeviceDescriptor)(nil), // 7: fluid.controlplane.v1.GenericDeviceDescriptor
	(*IpAddress)(nil),               // 8: fluid.controlplane.v1.IpAddress
	(*v1.KeyValue)(nil),             // 9: std.v1.KeyValue
}
var file_fluid_controlplane_v1_controlplane_proto_depIdxs = []int32{
	3,  // 0: fluid.controlplane.v1.ControlMessageRequest.message:type_name -> fluid.controlplane.v1.ControlMessage
	3,  // 1: fluid.controlplane.v1.ControlMessageResponse.message:type_name -> fluid.controlplane.v1.ControlMessage
	4,  // 2: fluid.controlplane.v1.ControlMessage.telemetry:type_name -> fluid.controlplane.v1.Telemetry
	5,  // 3: fluid.controlplane.v1.ControlMessage.devices:type_name -> fluid.controlplane.v1.Devices
	6,  // 4: fluid.controlplane.v1.Devices.generic:type_name -> fluid.controlplane.v1.GenericDevice
	7,  // 5: fluid.controlplane.v1.GenericDevice.devices:type_name -> fluid.controlplane.v1.GenericDeviceDescriptor
	8,  // 6: fluid.controlplane.v1.GenericDeviceDescriptor.addresses:type_name -> fluid.controlplane.v1.IpAddress
	9,  // 7: fluid.controlplane.v1.GenericDeviceDescriptor.labels:type_name -> std.v1.KeyValue
	0,  // 8: fluid.controlplane.v1.IpAddress.version:type_name -> fluid.controlplane.v1.IPVersion
	1,  // 9: fluid.controlplane.v1.ControlPlaneService.Control:input_type -> fluid.controlplane.v1.ControlMessageRequest
	2,  // 10: fluid.controlplane.v1.ControlPlaneService.Control:output_type -> fluid.controlplane.v1.ControlMessageResponse
	10, // [10:11] is the sub-list for method output_type
	9,  // [9:10] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_fluid_controlplane_v1_controlplane_proto_init() }
func file_fluid_controlplane_v1_controlplane_proto_init() {
	if File_fluid_controlplane_v1_controlplane_proto != nil {
		return
	}
	file_fluid_controlplane_v1_controlplane_proto_msgTypes[2].OneofWrappers = []any{
		(*ControlMessage_Telemetry)(nil),
		(*ControlMessage_Devices)(nil),
	}
	file_fluid_controlplane_v1_controlplane_proto_msgTypes[4].OneofWrappers = []any{
		(*Devices_Generic)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_fluid_controlplane_v1_controlplane_proto_rawDesc), len(file_fluid_controlplane_v1_controlplane_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fluid_controlplane_v1_controlplane_proto_goTypes,
		DependencyIndexes: file_fluid_controlplane_v1_controlplane_proto_depIdxs,
		EnumInfos:         file_fluid_controlplane_v1_controlplane_proto_enumTypes,
		MessageInfos:      file_fluid_controlplane_v1_controlplane_proto_msgTypes,
	}.Build()
	File_fluid_controlplane_v1_controlplane_proto = out.File
	file_fluid_controlplane_v1_controlplane_proto_goTypes = nil
	file_fluid_controlplane_v1_controlplane_proto_depIdxs = nil
}
