// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: fluid/controlplane/v1/controlplane.proto

package controlplanev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/liquidspill/proto/go/fluid/controlplane/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ControlPlaneServiceName is the fully-qualified name of the ControlPlaneService service.
	ControlPlaneServiceName = "fluid.controlplane.v1.ControlPlaneService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ControlPlaneServiceControlProcedure is the fully-qualified name of the ControlPlaneService's
	// Control RPC.
	ControlPlaneServiceControlProcedure = "/fluid.controlplane.v1.ControlPlaneService/Control"
)

// ControlPlaneServiceClient is a client for the fluid.controlplane.v1.ControlPlaneService service.
type ControlPlaneServiceClient interface {
	Control(context.Context, *connect.Request[v1.ControlMessageRequest]) (*connect.Response[v1.ControlMessageResponse], error)
}

// NewControlPlaneServiceClient constructs a client for the
// fluid.controlplane.v1.ControlPlaneService service. By default, it uses the Connect protocol with
// the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use
// the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewControlPlaneServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ControlPlaneServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	controlPlaneServiceMethods := v1.File_fluid_controlplane_v1_controlplane_proto.Services().ByName("ControlPlaneService").Methods()
	return &controlPlaneServiceClient{
		control: connect.NewClient[v1.ControlMessageRequest, v1.ControlMessageResponse](
			httpClient,
			baseURL+ControlPlaneServiceControlProcedure,
			connect.WithSchema(controlPlaneServiceMethods.ByName("Control")),
			connect.WithClientOptions(opts...),
		),
	}
}

// controlPlaneServiceClient implements ControlPlaneServiceClient.
type controlPlaneServiceClient struct {
	control *connect.Client[v1.ControlMessageRequest, v1.ControlMessageResponse]
}

// Control calls fluid.controlplane.v1.ControlPlaneService.Control.
func (c *controlPlaneServiceClient) Control(ctx context.Context, req *connect.Request[v1.ControlMessageRequest]) (*connect.Response[v1.ControlMessageResponse], error) {
	return c.control.CallUnary(ctx, req)
}

// ControlPlaneServiceHandler is an implementation of the fluid.controlplane.v1.ControlPlaneService
// service.
type ControlPlaneServiceHandler interface {
	Control(context.Context, *connect.Request[v1.ControlMessageRequest]) (*connect.Response[v1.ControlMessageResponse], error)
}

// NewControlPlaneServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewControlPlaneServiceHandler(svc ControlPlaneServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	controlPlaneServiceMethods := v1.File_fluid_controlplane_v1_controlplane_proto.Services().ByName("ControlPlaneService").Methods()
	controlPlaneServiceControlHandler := connect.NewUnaryHandler(
		ControlPlaneServiceControlProcedure,
		svc.Control,
		connect.WithSchema(controlPlaneServiceMethods.ByName("Control")),
		connect.WithHandlerOptions(opts...),
	)
	return "/fluid.controlplane.v1.ControlPlaneService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ControlPlaneServiceControlProcedure:
			controlPlaneServiceControlHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedControlPlaneServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedControlPlaneServiceHandler struct{}

func (UnimplementedControlPlaneServiceHandler) Control(context.Context, *connect.Request[v1.ControlMessageRequest]) (*connect.Response[v1.ControlMessageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fluid.controlplane.v1.ControlPlaneService.Control is not implemented"))
}
