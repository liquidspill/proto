// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: fluid/flow/v1/flow.proto

package flowv1

import (
	_ "github.com/srikrsna/protoc-gen-gotag/tagger"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Flow_FlowType int32

const (
	Flow_FLOW_TYPE_UNSPECIFIED Flow_FlowType = 0
	Flow_FLOW_TYPE_SFLOW_5     Flow_FlowType = 1
	Flow_FLOW_TYPE_NETFLOW_V5  Flow_FlowType = 2
	Flow_FLOW_TYPE_NETFLOW_V9  Flow_FlowType = 3
	Flow_FLOW_TYPE_IPFIX       Flow_FlowType = 4
)

// Enum value maps for Flow_FlowType.
var (
	Flow_FlowType_name = map[int32]string{
		0: "FLOW_TYPE_UNSPECIFIED",
		1: "FLOW_TYPE_SFLOW_5",
		2: "FLOW_TYPE_NETFLOW_V5",
		3: "FLOW_TYPE_NETFLOW_V9",
		4: "FLOW_TYPE_IPFIX",
	}
	Flow_FlowType_value = map[string]int32{
		"FLOW_TYPE_UNSPECIFIED": 0,
		"FLOW_TYPE_SFLOW_5":     1,
		"FLOW_TYPE_NETFLOW_V5":  2,
		"FLOW_TYPE_NETFLOW_V9":  3,
		"FLOW_TYPE_IPFIX":       4,
	}
)

func (x Flow_FlowType) Enum() *Flow_FlowType {
	p := new(Flow_FlowType)
	*p = x
	return p
}

func (x Flow_FlowType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Flow_FlowType) Descriptor() protoreflect.EnumDescriptor {
	return file_fluid_flow_v1_flow_proto_enumTypes[0].Descriptor()
}

func (Flow_FlowType) Type() protoreflect.EnumType {
	return &file_fluid_flow_v1_flow_proto_enumTypes[0]
}

func (x Flow_FlowType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Flow_FlowType.Descriptor instead.
func (Flow_FlowType) EnumDescriptor() ([]byte, []int) {
	return file_fluid_flow_v1_flow_proto_rawDescGZIP(), []int{0, 0}
}

type Flow struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	FluidVersion string                 `protobuf:"bytes,1,opt,name=fluid_version,json=fluidVersion,proto3" json:"fluid_version,omitempty" fluid:"minmax" parquet:"fluid_version,dict"`
	Type         Flow_FlowType          `protobuf:"varint,2,opt,name=type,proto3,enum=fluid.flow.v1.Flow_FlowType" json:"type,omitempty" fluid:"bloom" parquet:"type,dict"`
	TimeReceived int64                  `protobuf:"varint,3,opt,name=time_received,json=timeReceived,proto3" json:"time_received,omitempty" fluid:"minmax" parquet:"time_received,timestamp,delta"`
	Sequence     uint32                 `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty" fluid:"minmax" parquet:"sequence"`
	SamplingRate uint32                 `protobuf:"varint,5,opt,name=sampling_rate,json=samplingRate,proto3" json:"sampling_rate,omitempty" fluid:"minmax" parquet:"sampling_rate"`
	Direction    uint32                 `protobuf:"varint,6,opt,name=direction,proto3" json:"direction,omitempty" fluid:"bloom" parquet:"direction,dict"`
	// Sampler information
	SamplerAddress []byte `protobuf:"bytes,7,opt,name=sampler_address,json=samplerAddress,proto3" json:"sampler_address,omitempty" fluid:"minmax,ip" parquet:"sampler_address"` // Fixed 16 byte array
	// Flow timing
	FlowStartTime int64 `protobuf:"varint,8,opt,name=flow_start_time,json=flowStartTime,proto3" json:"flow_start_time,omitempty" fluid:"minmax" parquet:"flow_start_time,timestamp,delta"`
	FlowEndTime   int64 `protobuf:"varint,9,opt,name=flow_end_time,json=flowEndTime,proto3" json:"flow_end_time,omitempty" fluid:"minmax" parquet:"flow_end_time,timestamp,delta"`
	// Size metrics
	Bytes   uint32 `protobuf:"varint,10,opt,name=bytes,proto3" json:"bytes,omitempty" fluid:"minmax" parquet:"bytes"`
	Packets uint32 `protobuf:"varint,11,opt,name=packets,proto3" json:"packets,omitempty" fluid:"minmax" parquet:"packets"`
	// Network addresses
	SrcAddr   []byte `protobuf:"bytes,12,opt,name=src_addr,json=srcAddr,proto3" json:"src_addr,omitempty" fluid:"minmax,ip" parquet:"src_addr"` // Fixed 16 byte array
	DstAddr   []byte `protobuf:"bytes,13,opt,name=dst_addr,json=dstAddr,proto3" json:"dst_addr,omitempty" fluid:"minmax,ip" parquet:"dst_addr"` // Fixed 16 byte array
	Ethertype string `protobuf:"bytes,14,opt,name=ethertype,proto3" json:"ethertype,omitempty" fluid:"bloom" parquet:"ethertype,dict"`
	Protocol  uint32 `protobuf:"varint,15,opt,name=protocol,proto3" json:"protocol,omitempty" fluid:"bloom" parquet:"protocol,dict"`
	// Ports
	SrcPort uint32 `protobuf:"varint,16,opt,name=src_port,json=srcPort,proto3" json:"src_port,omitempty" fluid:"minmax" parquet:"src_port"`
	DstPort uint32 `protobuf:"varint,17,opt,name=dst_port,json=dstPort,proto3" json:"dst_port,omitempty" fluid:"minmax" parquet:"dst_port"`
	// Interfaces
	InInterface  uint32 `protobuf:"varint,18,opt,name=in_interface,json=inInterface,proto3" json:"in_interface,omitempty" fluid:"minmax" parquet:"in_interface"`
	OutInterface uint32 `protobuf:"varint,19,opt,name=out_interface,json=outInterface,proto3" json:"out_interface,omitempty" fluid:"minmax" parquet:"out_interface"`
	// Ethernet information
	SrcMac uint64 `protobuf:"varint,20,opt,name=src_mac,json=srcMac,proto3" json:"src_mac,omitempty" fluid:"minmax" parquet:"src_mac"`
	DstMac uint64 `protobuf:"varint,21,opt,name=dst_mac,json=dstMac,proto3" json:"dst_mac,omitempty" fluid:"minmax" parquet:"dst_mac"`
	// VLAN information
	SrcVlan uint32 `protobuf:"varint,22,opt,name=src_vlan,json=srcVlan,proto3" json:"src_vlan,omitempty" parquet:"src_vlan"`
	DstVlan uint32 `protobuf:"varint,23,opt,name=dst_vlan,json=dstVlan,proto3" json:"dst_vlan,omitempty" parquet:"dst_vlan"`
	VlanId  uint32 `protobuf:"varint,24,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty" parquet:"vlan_id"`
	// VRF information
	IngressVrfId uint32 `protobuf:"varint,25,opt,name=ingress_vrf_id,json=ingressVrfId,proto3" json:"ingress_vrf_id,omitempty" parquet:"ingress_vrf_id"`
	EgressVrfId  uint32 `protobuf:"varint,26,opt,name=egress_vrf_id,json=egressVrfId,proto3" json:"egress_vrf_id,omitempty" parquet:"egress_vrf_id"`
	// IP and TCP flags
	IpTos            uint32 `protobuf:"varint,27,opt,name=ip_tos,json=ipTos,proto3" json:"ip_tos,omitempty" parquet:"ip_tos"`
	IpTtl            uint32 `protobuf:"varint,28,opt,name=ip_ttl,json=ipTtl,proto3" json:"ip_ttl,omitempty" parquet:"ip_ttl"`
	TcpFlags         uint32 `protobuf:"varint,29,opt,name=tcp_flags,json=tcpFlags,proto3" json:"tcp_flags,omitempty" fluid:"bloom" parquet:"tcp_flags,dict"`
	IcmpType         uint32 `protobuf:"varint,30,opt,name=icmp_type,json=icmpType,proto3" json:"icmp_type,omitempty" fluid:"bloom" parquet:"icmp_type,dict"`
	IcmpCode         uint32 `protobuf:"varint,31,opt,name=icmp_code,json=icmpCode,proto3" json:"icmp_code,omitempty" fluid:"bloom" parquet:"icmp_code,dict"`
	Ipv6FlowLabel    uint32 `protobuf:"varint,32,opt,name=ipv6_flow_label,json=ipv6FlowLabel,proto3" json:"ipv6_flow_label,omitempty" parquet:"ipv6_flow_label"`
	ForwardingStatus uint32 `protobuf:"varint,33,opt,name=forwarding_status,json=forwardingStatus,proto3" json:"forwarding_status,omitempty" parquet:"forwarding_status"`
	// Fragment information
	FragmentId      uint32 `protobuf:"varint,34,opt,name=fragment_id,json=fragmentId,proto3" json:"fragment_id,omitempty" parquet:"fragment_id"`
	FragmentOffset  uint32 `protobuf:"varint,35,opt,name=fragment_offset,json=fragmentOffset,proto3" json:"fragment_offset,omitempty" parquet:"fragment_offset"`
	BiFlowDirection uint32 `protobuf:"varint,36,opt,name=bi_flow_direction,json=biFlowDirection,proto3" json:"bi_flow_direction,omitempty" parquet:"bi_flow_direction"`
	// AS information
	SrcAs     string `protobuf:"bytes,37,opt,name=src_as,json=srcAs,proto3" json:"src_as,omitempty" fluid:"bloom" parquet:"src_as,dict"`
	SrcAsn    uint32 `protobuf:"varint,38,opt,name=src_asn,json=srcAsn,proto3" json:"src_asn,omitempty" fluid:"bloom" parquet:"src_asn,dict"`
	DstAs     string `protobuf:"bytes,39,opt,name=dst_as,json=dstAs,proto3" json:"dst_as,omitempty" fluid:"bloom" parquet:"dst_as,dict"`
	DstAsn    uint32 `protobuf:"varint,40,opt,name=dst_asn,json=dstAsn,proto3" json:"dst_asn,omitempty" fluid:"bloom" parquet:"dst_asn,dict"`
	NexthopAs uint32 `protobuf:"varint,41,opt,name=nexthop_as,json=nexthopAs,proto3" json:"nexthop_as,omitempty" parquet:"nexthop_as"`
	Nexthop   []byte `protobuf:"bytes,42,opt,name=nexthop,proto3" json:"nexthop,omitempty" fluid:"minmax,ip" parquet:"nexthop"` // Fixed 16 byte array
	// Geo information
	SrcCity    string `protobuf:"bytes,43,opt,name=src_city,json=srcCity,proto3" json:"src_city,omitempty" fluid:"bloom" parquet:"src_city,dict"`
	SrcCountry string `protobuf:"bytes,44,opt,name=src_country,json=srcCountry,proto3" json:"src_country,omitempty" fluid:"bloom" parquet:"src_country,dict"`
	DstCity    string `protobuf:"bytes,45,opt,name=dst_city,json=dstCity,proto3" json:"dst_city,omitempty" fluid:"bloom" parquet:"dst_city,dict"`
	DstCountry string `protobuf:"bytes,46,opt,name=dst_country,json=dstCountry,proto3" json:"dst_country,omitempty" fluid:"bloom" parquet:"dst_country,dict"`
	// Network prefix
	SrcNet uint32 `protobuf:"varint,47,opt,name=src_net,json=srcNet,proto3" json:"src_net,omitempty" fluid:"minmax" parquet:"src_net"`
	DstNet uint32 `protobuf:"varint,48,opt,name=dst_net,json=dstNet,proto3" json:"dst_net,omitempty" fluid:"minmax" parquet:"dst_net"`
	// Encapsulation information
	HasEncap            bool   `protobuf:"varint,49,opt,name=has_encap,json=hasEncap,proto3" json:"has_encap,omitempty" parquet:"has_encap"`
	SrcAddrEncap        []byte `protobuf:"bytes,50,opt,name=src_addr_encap,json=srcAddrEncap,proto3" json:"src_addr_encap,omitempty" fluid:"minmax,ip" parquet:"src_addr_encap"` // Fixed 16 byte array
	DstAddrEncap        []byte `protobuf:"bytes,51,opt,name=dst_addr_encap,json=dstAddrEncap,proto3" json:"dst_addr_encap,omitempty" fluid:"minmax,ip" parquet:"dst_addr_encap"` // Fixed 16 byte array
	ProtoEncap          uint32 `protobuf:"varint,52,opt,name=proto_encap,json=protoEncap,proto3" json:"proto_encap,omitempty" parquet:"proto_encap"`
	EthertypeEncap      uint32 `protobuf:"varint,53,opt,name=ethertype_encap,json=ethertypeEncap,proto3" json:"ethertype_encap,omitempty" parquet:"ethertype_encap"`
	IpTosEncap          uint32 `protobuf:"varint,54,opt,name=ip_tos_encap,json=ipTosEncap,proto3" json:"ip_tos_encap,omitempty" parquet:"ip_tos_encap"`
	IpTtlEncap          uint32 `protobuf:"varint,55,opt,name=ip_ttl_encap,json=ipTtlEncap,proto3" json:"ip_ttl_encap,omitempty" parquet:"ip_ttl_encap"`
	Ipv6FlowLabelEncap  uint32 `protobuf:"varint,56,opt,name=ipv6_flow_label_encap,json=ipv6FlowLabelEncap,proto3" json:"ipv6_flow_label_encap,omitempty" parquet:"ipv6_flow_label_encap"`
	FragmentIdEncap     uint32 `protobuf:"varint,57,opt,name=fragment_id_encap,json=fragmentIdEncap,proto3" json:"fragment_id_encap,omitempty" parquet:"fragment_id_encap"`
	FragmentOffsetEncap uint32 `protobuf:"varint,58,opt,name=fragment_offset_encap,json=fragmentOffsetEncap,proto3" json:"fragment_offset_encap,omitempty" parquet:"fragment_offset_encap"`
	// MPLS information
	MplsTtl   []uint32 `protobuf:"varint,80,rep,packed,name=mpls_ttl,json=mplsTtl,proto3" json:"mpls_ttl,omitempty" parquet:"mpls_ttl"`
	MplsLabel []uint32 `protobuf:"varint,81,rep,packed,name=mpls_label,json=mplsLabel,proto3" json:"mpls_label,omitempty" parquet:"mpls_label"`
	MplsIp    [][]byte `protobuf:"bytes,82,rep,name=mpls_ip,json=mplsIp,proto3" json:"mpls_ip,omitempty" parquet:"mpls_ip"`
	// PPP information
	HasPpp            bool   `protobuf:"varint,71,opt,name=has_ppp,json=hasPpp,proto3" json:"has_ppp,omitempty" parquet:"has_ppp"`
	PppAddressControl uint32 `protobuf:"varint,72,opt,name=ppp_address_control,json=pppAddressControl,proto3" json:"ppp_address_control,omitempty" parquet:"ppp_address_control"`
	// BGP information
	BgpNextHop     []byte   `protobuf:"bytes,73,opt,name=bgp_next_hop,json=bgpNextHop,proto3" json:"bgp_next_hop,omitempty" parquet:"bgp_next_hop"`
	BgpCommunities []uint32 `protobuf:"varint,74,rep,packed,name=bgp_communities,json=bgpCommunities,proto3" json:"bgp_communities,omitempty" parquet:"bgp_communities"`
	AsPath         []uint32 `protobuf:"varint,75,rep,packed,name=as_path,json=asPath,proto3" json:"as_path,omitempty" parquet:"as_path"`
	// Spilled additional metadata
	Segments      []string `protobuf:"bytes,76,rep,name=segments,proto3" json:"segments,omitempty" fluid:"bloom" parquet:"segments,dict"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Flow) Reset() {
	*x = Flow{}
	mi := &file_fluid_flow_v1_flow_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Flow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flow) ProtoMessage() {}

func (x *Flow) ProtoReflect() protoreflect.Message {
	mi := &file_fluid_flow_v1_flow_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flow.ProtoReflect.Descriptor instead.
func (*Flow) Descriptor() ([]byte, []int) {
	return file_fluid_flow_v1_flow_proto_rawDescGZIP(), []int{0}
}

func (x *Flow) GetFluidVersion() string {
	if x != nil {
		return x.FluidVersion
	}
	return ""
}

func (x *Flow) GetType() Flow_FlowType {
	if x != nil {
		return x.Type
	}
	return Flow_FLOW_TYPE_UNSPECIFIED
}

func (x *Flow) GetTimeReceived() int64 {
	if x != nil {
		return x.TimeReceived
	}
	return 0
}

func (x *Flow) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Flow) GetSamplingRate() uint32 {
	if x != nil {
		return x.SamplingRate
	}
	return 0
}

func (x *Flow) GetDirection() uint32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *Flow) GetSamplerAddress() []byte {
	if x != nil {
		return x.SamplerAddress
	}
	return nil
}

func (x *Flow) GetFlowStartTime() int64 {
	if x != nil {
		return x.FlowStartTime
	}
	return 0
}

func (x *Flow) GetFlowEndTime() int64 {
	if x != nil {
		return x.FlowEndTime
	}
	return 0
}

func (x *Flow) GetBytes() uint32 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *Flow) GetPackets() uint32 {
	if x != nil {
		return x.Packets
	}
	return 0
}

func (x *Flow) GetSrcAddr() []byte {
	if x != nil {
		return x.SrcAddr
	}
	return nil
}

func (x *Flow) GetDstAddr() []byte {
	if x != nil {
		return x.DstAddr
	}
	return nil
}

func (x *Flow) GetEthertype() string {
	if x != nil {
		return x.Ethertype
	}
	return ""
}

func (x *Flow) GetProtocol() uint32 {
	if x != nil {
		return x.Protocol
	}
	return 0
}

func (x *Flow) GetSrcPort() uint32 {
	if x != nil {
		return x.SrcPort
	}
	return 0
}

func (x *Flow) GetDstPort() uint32 {
	if x != nil {
		return x.DstPort
	}
	return 0
}

func (x *Flow) GetInInterface() uint32 {
	if x != nil {
		return x.InInterface
	}
	return 0
}

func (x *Flow) GetOutInterface() uint32 {
	if x != nil {
		return x.OutInterface
	}
	return 0
}

func (x *Flow) GetSrcMac() uint64 {
	if x != nil {
		return x.SrcMac
	}
	return 0
}

func (x *Flow) GetDstMac() uint64 {
	if x != nil {
		return x.DstMac
	}
	return 0
}

func (x *Flow) GetSrcVlan() uint32 {
	if x != nil {
		return x.SrcVlan
	}
	return 0
}

func (x *Flow) GetDstVlan() uint32 {
	if x != nil {
		return x.DstVlan
	}
	return 0
}

func (x *Flow) GetVlanId() uint32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *Flow) GetIngressVrfId() uint32 {
	if x != nil {
		return x.IngressVrfId
	}
	return 0
}

func (x *Flow) GetEgressVrfId() uint32 {
	if x != nil {
		return x.EgressVrfId
	}
	return 0
}

func (x *Flow) GetIpTos() uint32 {
	if x != nil {
		return x.IpTos
	}
	return 0
}

func (x *Flow) GetIpTtl() uint32 {
	if x != nil {
		return x.IpTtl
	}
	return 0
}

func (x *Flow) GetTcpFlags() uint32 {
	if x != nil {
		return x.TcpFlags
	}
	return 0
}

func (x *Flow) GetIcmpType() uint32 {
	if x != nil {
		return x.IcmpType
	}
	return 0
}

func (x *Flow) GetIcmpCode() uint32 {
	if x != nil {
		return x.IcmpCode
	}
	return 0
}

func (x *Flow) GetIpv6FlowLabel() uint32 {
	if x != nil {
		return x.Ipv6FlowLabel
	}
	return 0
}

func (x *Flow) GetForwardingStatus() uint32 {
	if x != nil {
		return x.ForwardingStatus
	}
	return 0
}

func (x *Flow) GetFragmentId() uint32 {
	if x != nil {
		return x.FragmentId
	}
	return 0
}

func (x *Flow) GetFragmentOffset() uint32 {
	if x != nil {
		return x.FragmentOffset
	}
	return 0
}

func (x *Flow) GetBiFlowDirection() uint32 {
	if x != nil {
		return x.BiFlowDirection
	}
	return 0
}

func (x *Flow) GetSrcAs() string {
	if x != nil {
		return x.SrcAs
	}
	return ""
}

func (x *Flow) GetSrcAsn() uint32 {
	if x != nil {
		return x.SrcAsn
	}
	return 0
}

func (x *Flow) GetDstAs() string {
	if x != nil {
		return x.DstAs
	}
	return ""
}

func (x *Flow) GetDstAsn() uint32 {
	if x != nil {
		return x.DstAsn
	}
	return 0
}

func (x *Flow) GetNexthopAs() uint32 {
	if x != nil {
		return x.NexthopAs
	}
	return 0
}

func (x *Flow) GetNexthop() []byte {
	if x != nil {
		return x.Nexthop
	}
	return nil
}

func (x *Flow) GetSrcCity() string {
	if x != nil {
		return x.SrcCity
	}
	return ""
}

func (x *Flow) GetSrcCountry() string {
	if x != nil {
		return x.SrcCountry
	}
	return ""
}

func (x *Flow) GetDstCity() string {
	if x != nil {
		return x.DstCity
	}
	return ""
}

func (x *Flow) GetDstCountry() string {
	if x != nil {
		return x.DstCountry
	}
	return ""
}

func (x *Flow) GetSrcNet() uint32 {
	if x != nil {
		return x.SrcNet
	}
	return 0
}

func (x *Flow) GetDstNet() uint32 {
	if x != nil {
		return x.DstNet
	}
	return 0
}

func (x *Flow) GetHasEncap() bool {
	if x != nil {
		return x.HasEncap
	}
	return false
}

func (x *Flow) GetSrcAddrEncap() []byte {
	if x != nil {
		return x.SrcAddrEncap
	}
	return nil
}

func (x *Flow) GetDstAddrEncap() []byte {
	if x != nil {
		return x.DstAddrEncap
	}
	return nil
}

func (x *Flow) GetProtoEncap() uint32 {
	if x != nil {
		return x.ProtoEncap
	}
	return 0
}

func (x *Flow) GetEthertypeEncap() uint32 {
	if x != nil {
		return x.EthertypeEncap
	}
	return 0
}

func (x *Flow) GetIpTosEncap() uint32 {
	if x != nil {
		return x.IpTosEncap
	}
	return 0
}

func (x *Flow) GetIpTtlEncap() uint32 {
	if x != nil {
		return x.IpTtlEncap
	}
	return 0
}

func (x *Flow) GetIpv6FlowLabelEncap() uint32 {
	if x != nil {
		return x.Ipv6FlowLabelEncap
	}
	return 0
}

func (x *Flow) GetFragmentIdEncap() uint32 {
	if x != nil {
		return x.FragmentIdEncap
	}
	return 0
}

func (x *Flow) GetFragmentOffsetEncap() uint32 {
	if x != nil {
		return x.FragmentOffsetEncap
	}
	return 0
}

func (x *Flow) GetMplsTtl() []uint32 {
	if x != nil {
		return x.MplsTtl
	}
	return nil
}

func (x *Flow) GetMplsLabel() []uint32 {
	if x != nil {
		return x.MplsLabel
	}
	return nil
}

func (x *Flow) GetMplsIp() [][]byte {
	if x != nil {
		return x.MplsIp
	}
	return nil
}

func (x *Flow) GetHasPpp() bool {
	if x != nil {
		return x.HasPpp
	}
	return false
}

func (x *Flow) GetPppAddressControl() uint32 {
	if x != nil {
		return x.PppAddressControl
	}
	return 0
}

func (x *Flow) GetBgpNextHop() []byte {
	if x != nil {
		return x.BgpNextHop
	}
	return nil
}

func (x *Flow) GetBgpCommunities() []uint32 {
	if x != nil {
		return x.BgpCommunities
	}
	return nil
}

func (x *Flow) GetAsPath() []uint32 {
	if x != nil {
		return x.AsPath
	}
	return nil
}

func (x *Flow) GetSegments() []string {
	if x != nil {
		return x.Segments
	}
	return nil
}

var File_fluid_flow_v1_flow_proto protoreflect.FileDescriptor

const file_fluid_flow_v1_flow_proto_rawDesc = "" +
	"\n" +
	"\x18fluid/flow/v1/flow.proto\x12\rfluid.flow.v1\x1a\x13tagger/tagger.proto\"\xf1%\n" +
	"\x04Flow\x12U\n" +
	"\rfluid_version\x18\x01 \x01(\tB0\x9a\x84\x9e\x03+parquet:\"fluid_version,dict\" fluid:\"minmax\"R\ffluidVersion\x12X\n" +
	"\x04type\x18\x02 \x01(\x0e2\x1c.fluid.flow.v1.Flow.FlowTypeB&\x9a\x84\x9e\x03!parquet:\"type,dict\" fluid:\"bloom\"R\x04type\x12`\n" +
	"\rtime_received\x18\x03 \x01(\x03B;\x9a\x84\x9e\x036parquet:\"time_received,timestamp,delta\" fluid:\"minmax\"R\ftimeReceived\x12B\n" +
	"\bsequence\x18\x04 \x01(\rB&\x9a\x84\x9e\x03!parquet:\"sequence\" fluid:\"minmax\"R\bsequence\x12P\n" +
	"\rsampling_rate\x18\x05 \x01(\rB+\x9a\x84\x9e\x03&parquet:\"sampling_rate\" fluid:\"minmax\"R\fsamplingRate\x12I\n" +
	"\tdirection\x18\x06 \x01(\rB+\x9a\x84\x9e\x03&parquet:\"direction,dict\" fluid:\"bloom\"R\tdirection\x12Y\n" +
	"\x0fsampler_address\x18\a \x01(\fB0\x9a\x84\x9e\x03+parquet:\"sampler_address\" fluid:\"minmax,ip\"R\x0esamplerAddress\x12e\n" +
	"\x0fflow_start_time\x18\b \x01(\x03B=\x9a\x84\x9e\x038parquet:\"flow_start_time,timestamp,delta\" fluid:\"minmax\"R\rflowStartTime\x12_\n" +
	"\rflow_end_time\x18\t \x01(\x03B;\x9a\x84\x9e\x036parquet:\"flow_end_time,timestamp,delta\" fluid:\"minmax\"R\vflowEndTime\x129\n" +
	"\x05bytes\x18\n" +
	" \x01(\rB#\x9a\x84\x9e\x03\x1eparquet:\"bytes\" fluid:\"minmax\"R\x05bytes\x12?\n" +
	"\apackets\x18\v \x01(\rB%\x9a\x84\x9e\x03 parquet:\"packets\" fluid:\"minmax\"R\apackets\x12D\n" +
	"\bsrc_addr\x18\f \x01(\fB)\x9a\x84\x9e\x03$parquet:\"src_addr\" fluid:\"minmax,ip\"R\asrcAddr\x12D\n" +
	"\bdst_addr\x18\r \x01(\fB)\x9a\x84\x9e\x03$parquet:\"dst_addr\" fluid:\"minmax,ip\"R\adstAddr\x12I\n" +
	"\tethertype\x18\x0e \x01(\tB+\x9a\x84\x9e\x03&parquet:\"ethertype,dict\" fluid:\"bloom\"R\tethertype\x12F\n" +
	"\bprotocol\x18\x0f \x01(\rB*\x9a\x84\x9e\x03%parquet:\"protocol,dict\" fluid:\"bloom\"R\bprotocol\x12A\n" +
	"\bsrc_port\x18\x10 \x01(\rB&\x9a\x84\x9e\x03!parquet:\"src_port\" fluid:\"minmax\"R\asrcPort\x12A\n" +
	"\bdst_port\x18\x11 \x01(\rB&\x9a\x84\x9e\x03!parquet:\"dst_port\" fluid:\"minmax\"R\adstPort\x12M\n" +
	"\fin_interface\x18\x12 \x01(\rB*\x9a\x84\x9e\x03%parquet:\"in_interface\" fluid:\"minmax\"R\vinInterface\x12P\n" +
	"\rout_interface\x18\x13 \x01(\rB+\x9a\x84\x9e\x03&parquet:\"out_interface\" fluid:\"minmax\"R\foutInterface\x12>\n" +
	"\asrc_mac\x18\x14 \x01(\x04B%\x9a\x84\x9e\x03 parquet:\"src_mac\" fluid:\"minmax\"R\x06srcMac\x12>\n" +
	"\adst_mac\x18\x15 \x01(\x04B%\x9a\x84\x9e\x03 parquet:\"dst_mac\" fluid:\"minmax\"R\x06dstMac\x122\n" +
	"\bsrc_vlan\x18\x16 \x01(\rB\x17\x9a\x84\x9e\x03\x12parquet:\"src_vlan\"R\asrcVlan\x122\n" +
	"\bdst_vlan\x18\x17 \x01(\rB\x17\x9a\x84\x9e\x03\x12parquet:\"dst_vlan\"R\adstVlan\x12/\n" +
	"\avlan_id\x18\x18 \x01(\rB\x16\x9a\x84\x9e\x03\x11parquet:\"vlan_id\"R\x06vlanId\x12C\n" +
	"\x0eingress_vrf_id\x18\x19 \x01(\rB\x1d\x9a\x84\x9e\x03\x18parquet:\"ingress_vrf_id\"R\fingressVrfId\x12@\n" +
	"\regress_vrf_id\x18\x1a \x01(\rB\x1c\x9a\x84\x9e\x03\x17parquet:\"egress_vrf_id\"R\vegressVrfId\x12,\n" +
	"\x06ip_tos\x18\x1b \x01(\rB\x15\x9a\x84\x9e\x03\x10parquet:\"ip_tos\"R\x05ipTos\x12,\n" +
	"\x06ip_ttl\x18\x1c \x01(\rB\x15\x9a\x84\x9e\x03\x10parquet:\"ip_ttl\"R\x05ipTtl\x12H\n" +
	"\ttcp_flags\x18\x1d \x01(\rB+\x9a\x84\x9e\x03&parquet:\"tcp_flags,dict\" fluid:\"bloom\"R\btcpFlags\x12H\n" +
	"\ticmp_type\x18\x1e \x01(\rB+\x9a\x84\x9e\x03&parquet:\"icmp_type,dict\" fluid:\"bloom\"R\bicmpType\x12H\n" +
	"\ticmp_code\x18\x1f \x01(\rB+\x9a\x84\x9e\x03&parquet:\"icmp_code,dict\" fluid:\"bloom\"R\bicmpCode\x12F\n" +
	"\x0fipv6_flow_label\x18  \x01(\rB\x1e\x9a\x84\x9e\x03\x19parquet:\"ipv6_flow_label\"R\ripv6FlowLabel\x12M\n" +
	"\x11forwarding_status\x18! \x01(\rB \x9a\x84\x9e\x03\x1bparquet:\"forwarding_status\"R\x10forwardingStatus\x12;\n" +
	"\vfragment_id\x18\" \x01(\rB\x1a\x9a\x84\x9e\x03\x15parquet:\"fragment_id\"R\n" +
	"fragmentId\x12G\n" +
	"\x0ffragment_offset\x18# \x01(\rB\x1e\x9a\x84\x9e\x03\x19parquet:\"fragment_offset\"R\x0efragmentOffset\x12L\n" +
	"\x11bi_flow_direction\x18$ \x01(\rB \x9a\x84\x9e\x03\x1bparquet:\"bi_flow_direction\"R\x0fbiFlowDirection\x12?\n" +
	"\x06src_as\x18% \x01(\tB(\x9a\x84\x9e\x03#parquet:\"src_as,dict\" fluid:\"bloom\"R\x05srcAs\x12B\n" +
	"\asrc_asn\x18& \x01(\rB)\x9a\x84\x9e\x03$parquet:\"src_asn,dict\" fluid:\"bloom\"R\x06srcAsn\x12?\n" +
	"\x06dst_as\x18' \x01(\tB(\x9a\x84\x9e\x03#parquet:\"dst_as,dict\" fluid:\"bloom\"R\x05dstAs\x12B\n" +
	"\adst_asn\x18( \x01(\rB)\x9a\x84\x9e\x03$parquet:\"dst_asn,dict\" fluid:\"bloom\"R\x06dstAsn\x128\n" +
	"\n" +
	"nexthop_as\x18) \x01(\rB\x19\x9a\x84\x9e\x03\x14parquet:\"nexthop_as\"R\tnexthopAs\x12B\n" +
	"\anexthop\x18* \x01(\fB(\x9a\x84\x9e\x03#parquet:\"nexthop\" fluid:\"minmax,ip\"R\anexthop\x12E\n" +
	"\bsrc_city\x18+ \x01(\tB*\x9a\x84\x9e\x03%parquet:\"src_city,dict\" fluid:\"bloom\"R\asrcCity\x12N\n" +
	"\vsrc_country\x18, \x01(\tB-\x9a\x84\x9e\x03(parquet:\"src_country,dict\" fluid:\"bloom\"R\n" +
	"srcCountry\x12E\n" +
	"\bdst_city\x18- \x01(\tB*\x9a\x84\x9e\x03%parquet:\"dst_city,dict\" fluid:\"bloom\"R\adstCity\x12N\n" +
	"\vdst_country\x18. \x01(\tB-\x9a\x84\x9e\x03(parquet:\"dst_country,dict\" fluid:\"bloom\"R\n" +
	"dstCountry\x12>\n" +
	"\asrc_net\x18/ \x01(\rB%\x9a\x84\x9e\x03 parquet:\"src_net\" fluid:\"minmax\"R\x06srcNet\x12>\n" +
	"\adst_net\x180 \x01(\rB%\x9a\x84\x9e\x03 parquet:\"dst_net\" fluid:\"minmax\"R\x06dstNet\x125\n" +
	"\thas_encap\x181 \x01(\bB\x18\x9a\x84\x9e\x03\x13parquet:\"has_encap\"R\bhasEncap\x12U\n" +
	"\x0esrc_addr_encap\x182 \x01(\fB/\x9a\x84\x9e\x03*parquet:\"src_addr_encap\" fluid:\"minmax,ip\"R\fsrcAddrEncap\x12U\n" +
	"\x0edst_addr_encap\x183 \x01(\fB/\x9a\x84\x9e\x03*parquet:\"dst_addr_encap\" fluid:\"minmax,ip\"R\fdstAddrEncap\x12;\n" +
	"\vproto_encap\x184 \x01(\rB\x1a\x9a\x84\x9e\x03\x15parquet:\"proto_encap\"R\n" +
	"protoEncap\x12G\n" +
	"\x0fethertype_encap\x185 \x01(\rB\x1e\x9a\x84\x9e\x03\x19parquet:\"ethertype_encap\"R\x0eethertypeEncap\x12=\n" +
	"\fip_tos_encap\x186 \x01(\rB\x1b\x9a\x84\x9e\x03\x16parquet:\"ip_tos_encap\"R\n" +
	"ipTosEncap\x12=\n" +
	"\fip_ttl_encap\x187 \x01(\rB\x1b\x9a\x84\x9e\x03\x16parquet:\"ip_ttl_encap\"R\n" +
	"ipTtlEncap\x12W\n" +
	"\x15ipv6_flow_label_encap\x188 \x01(\rB$\x9a\x84\x9e\x03\x1fparquet:\"ipv6_flow_label_encap\"R\x12ipv6FlowLabelEncap\x12L\n" +
	"\x11fragment_id_encap\x189 \x01(\rB \x9a\x84\x9e\x03\x1bparquet:\"fragment_id_encap\"R\x0ffragmentIdEncap\x12X\n" +
	"\x15fragment_offset_encap\x18: \x01(\rB$\x9a\x84\x9e\x03\x1fparquet:\"fragment_offset_encap\"R\x13fragmentOffsetEncap\x122\n" +
	"\bmpls_ttl\x18P \x03(\rB\x17\x9a\x84\x9e\x03\x12parquet:\"mpls_ttl\"R\amplsTtl\x128\n" +
	"\n" +
	"mpls_label\x18Q \x03(\rB\x19\x9a\x84\x9e\x03\x14parquet:\"mpls_label\"R\tmplsLabel\x12/\n" +
	"\ampls_ip\x18R \x03(\fB\x16\x9a\x84\x9e\x03\x11parquet:\"mpls_ip\"R\x06mplsIp\x12/\n" +
	"\ahas_ppp\x18G \x01(\bB\x16\x9a\x84\x9e\x03\x11parquet:\"has_ppp\"R\x06hasPpp\x12R\n" +
	"\x13ppp_address_control\x18H \x01(\rB\"\x9a\x84\x9e\x03\x1dparquet:\"ppp_address_control\"R\x11pppAddressControl\x12=\n" +
	"\fbgp_next_hop\x18I \x01(\fB\x1b\x9a\x84\x9e\x03\x16parquet:\"bgp_next_hop\"R\n" +
	"bgpNextHop\x12G\n" +
	"\x0fbgp_communities\x18J \x03(\rB\x1e\x9a\x84\x9e\x03\x19parquet:\"bgp_communities\"R\x0ebgpCommunities\x12/\n" +
	"\aas_path\x18K \x03(\rB\x16\x9a\x84\x9e\x03\x11parquet:\"as_path\"R\x06asPath\x12F\n" +
	"\bsegments\x18L \x03(\tB*\x9a\x84\x9e\x03%parquet:\"segments,dict\" fluid:\"bloom\"R\bsegments\"\x85\x01\n" +
	"\bFlowType\x12\x19\n" +
	"\x15FLOW_TYPE_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11FLOW_TYPE_SFLOW_5\x10\x01\x12\x18\n" +
	"\x14FLOW_TYPE_NETFLOW_V5\x10\x02\x12\x18\n" +
	"\x14FLOW_TYPE_NETFLOW_V9\x10\x03\x12\x13\n" +
	"\x0fFLOW_TYPE_IPFIX\x10\x04B6Z4github.com/liquidspill/proto/go/fluid/flow/v1;flowv1b\x06proto3"

var (
	file_fluid_flow_v1_flow_proto_rawDescOnce sync.Once
	file_fluid_flow_v1_flow_proto_rawDescData []byte
)

func file_fluid_flow_v1_flow_proto_rawDescGZIP() []byte {
	file_fluid_flow_v1_flow_proto_rawDescOnce.Do(func() {
		file_fluid_flow_v1_flow_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_fluid_flow_v1_flow_proto_rawDesc), len(file_fluid_flow_v1_flow_proto_rawDesc)))
	})
	return file_fluid_flow_v1_flow_proto_rawDescData
}

var file_fluid_flow_v1_flow_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_fluid_flow_v1_flow_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_fluid_flow_v1_flow_proto_goTypes = []any{
	(Flow_FlowType)(0), // 0: fluid.flow.v1.Flow.FlowType
	(*Flow)(nil),       // 1: fluid.flow.v1.Flow
}
var file_fluid_flow_v1_flow_proto_depIdxs = []int32{
	0, // 0: fluid.flow.v1.Flow.type:type_name -> fluid.flow.v1.Flow.FlowType
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_fluid_flow_v1_flow_proto_init() }
func file_fluid_flow_v1_flow_proto_init() {
	if File_fluid_flow_v1_flow_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_fluid_flow_v1_flow_proto_rawDesc), len(file_fluid_flow_v1_flow_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fluid_flow_v1_flow_proto_goTypes,
		DependencyIndexes: file_fluid_flow_v1_flow_proto_depIdxs,
		EnumInfos:         file_fluid_flow_v1_flow_proto_enumTypes,
		MessageInfos:      file_fluid_flow_v1_flow_proto_msgTypes,
	}.Build()
	File_fluid_flow_v1_flow_proto = out.File
	file_fluid_flow_v1_flow_proto_goTypes = nil
	file_fluid_flow_v1_flow_proto_depIdxs = nil
}
